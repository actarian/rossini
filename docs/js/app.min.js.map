{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","config","$httpProvider","$locationProvider","html5Mode","hashPrefix","run","$rootScope","getPerlinNoise","width","height","size","data","Uint8Array","perlin","ImprovedNoise","quality","z","Math","random","j","i","x","y","abs","noise","fade","t","lerp","a","b","grad","hash","h","u","v","p","floorX","floor","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB","getRandomRange","min","max","allowNegatives","n","app","Number","prototype","mod","this","downloadFile","document","createElement","body","appendChild","style","fileName","json","pretty","JSON","stringify","blob","Blob","type","url","window","URL","createObjectURL","href","download","click","revokeObjectURL","directive","restrict","scope","link","element","attributes","getObjectRibbon","add","console","log","scene","object","remove","update","c","stepper","steps","length","cpow","pow","tpow","step","getCurrentStep","position","spline","getPointAt","options","cameraHeight","camera","target","targetHeight","copy","lookAt","getMaterial","THREE","Vector2","innerWidth","innerHeight","MeshLineMaterial","color","Color","colors","lines","lineWidth","depthTest","updateMaterial","objects","ribbon","material","prev","Vector3","points","Array","fill","map","CatmullRomCurve3","geometry","Geometry","vertices","getPoints","line","MeshLine","setGeometry","Mesh","getObjectCircles","index","state","adding","Date","now","removing","enabled","tween","kill","TweenLite","to","duration","delay","ease","Power2","easeInOut","onComplete","getLine1","addPoints","useMeshLines","meshLine","meshLineGeometries1","push","meshLines1","meshLineMaterial1","LineLoop","material1","points1","group1","getLine2","meshLineGeometries2","meshLines2","meshLineMaterial2","material2","points2","group2","l","g","pn","ratio","degrees","radians","PI","radius","increment","sincos","base","cos","sin","updateLine","audioStrength","noiseStrength","circularStrength","analyserData","forEach","aia","bands","aib","audioPow","nd","nia","iterator","nib","noisePow","noiseMap","linePow","ln","verticesNeedUpdate","lines1","lines2","rotation","circle","scale","setHex","overLines","LineBasicMaterial","Object3D","texture","TextureLoader","load","wrapS","RepeatWrapping","wrapT","repeat","set","MeshBasicMaterial","transparent","PlaneGeometry","plane","updateAnalyser","analyser","getByteFrequencyData","circles","render","controls","renderer","loop","stats","begin","end","requestAnimationFrame","audio","w2","h2","$on","$scope","current","setTimeout","previous","volume","audioVolume","Scene","SphereGeometry","sphere","PerspectiveCamera","WebGLRenderer","alpha","antialias","logarithmicDepthBuffer","setClearColor","setSize","Stats","domElement","dom","source","ctx","actx","AudioContext","webkitAudioContext","createAnalyser","Audio","src","audioUrl","addEventListener","bufferLength","createMediaElementSource","connect","destination","fftSize","frequencyBinCount","play","onWindowResize","aspect","updateProjectionMatrix","controller","onOptionsChanged","params","backgroundColor","background","getHexString","$broadcast","onChangePositions","gui","notes","randomize","__controllers","__min","value","__max","property","updateDisplay","__color","r","setValue","hex","saveJson","tweenTo","callback","setStep","next","id","name","extend","dat","GUI","closed","onChange","circlePosition","addFolder","addColor","OBJECTS","cameraTarget","tube","addListeners","fov","near","far","container","shadowMap","getElementById"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app', ['ngRoute', 'jsonFormatter']);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$httpProvider', function($httpProvider) {\r\n        // $httpProvider.defaults.withCredentials = true;\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$locationProvider', function($locationProvider) {\r\n\r\n        // HTML5 MODE url writing method (false: #/anchor/use, true: /html5/url/use)\r\n        $locationProvider.html5Mode(true);\r\n        $locationProvider.hashPrefix('');\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.run(['$rootScope', function($rootScope) {\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    Number.prototype.mod = function(n) {\n        return ((this % n) + n) % n;\n    };\n\n    var downloadFile = function downloadFile() {\n        var a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.style = \"display: none\";\n        return function(data, fileName, json, pretty) {\n            if (json) {\n                if (pretty) {\n                    data = JSON.stringify(data, null, 2); // spacing level = 2\n                } else {\n                    data = JSON.stringify(data);\n                }\n            }\n            var blob = new Blob([data], { type: \"octet/stream\" }),\n                url = window.URL.createObjectURL(blob);\n            a.href = url;\n            a.download = fileName;\n            a.click();\n            window.URL.revokeObjectURL(url);\n        };\n    }();\n\n    function getPerlinNoise(width, height) {\n        var size = width * height,\n            data = new Uint8Array(size),\n            perlin = new ImprovedNoise(),\n            quality = 1,\n            z = Math.random() * 100;\n        for (var j = 0; j < 4; j++) {\n            for (var i = 0; i < size; i++) {\n                var x = i % width,\n                    y = ~~(i / width);\n                data[i] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75);\n            }\n            quality *= 5;\n        }\n        return data;\n    }\n\n    function ImprovedNoise() {\n        var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\n            23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\n            174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n            133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\n            89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\n            202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\n            248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\n            178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n            14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n            93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n        ];\n        for (var i = 0; i < 256; i++) {\n            p[256 + i] = p[i];\n        }\n\n        function fade(t) {\n            return t * t * t * (t * (t * 6 - 15) + 10);\n        }\n\n        function lerp(t, a, b) {\n            return a + t * (b - a);\n        }\n\n        function grad(hash, x, y, z) {\n            var h = hash & 15;\n            var u = h < 8 ? x : y,\n                v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n\n        return {\n            noise: function(x, y, z) {\n                var floorX = Math.floor(x),\n                    floorY = Math.floor(y),\n                    floorZ = Math.floor(z);\n                var X = floorX & 255,\n                    Y = floorY & 255,\n                    Z = floorZ & 255;\n                x -= floorX;\n                y -= floorY;\n                z -= floorZ;\n                var xMinus1 = x - 1,\n                    yMinus1 = y - 1,\n                    zMinus1 = z - 1;\n                var u = fade(x),\n                    v = fade(y),\n                    w = fade(z);\n                var A = p[X] + Y,\n                    AA = p[A] + Z,\n                    AB = p[A + 1] + Z,\n                    B = p[X + 1] + Y,\n                    BA = p[B] + Z,\n                    BB = p[B + 1] + Z;\n                return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n                            grad(p[BA], xMinus1, y, z)),\n                        lerp(u, grad(p[AB], x, yMinus1, z),\n                            grad(p[BB], xMinus1, yMinus1, z))),\n                    lerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n                            grad(p[BA + 1], xMinus1, y, z - 1)),\n                        lerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n                            grad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n            }\n        };\n    }\n\n    function getRandomRange(min, max, allowNegatives) {\n        var n = -1 + Math.random() * 2;\n        var a = Math.abs(n);\n        var s = allowNegatives ? Math.floor(n / a) : 1;\n        return s * (min + (max - min) * a);\n    }\n\n    app.directive('scene', [function() {\n        return {\n            restrict: 'A',\n            scope: {\n                data: '=scene',\n            },\n            link: function(scope, element, attributes) {\n                var data = scope.data;\n                if (!data) {\n                    return;\n                }\n\n                var options = data.options;\n                var stepper = data.stepper;\n                var objects = data.objects;\n\n                var analyser, analyserData, audio;\n                var stats, scene, camera, shadow, back, light, renderer, width, height, w2, h2, mouse = { x: 0, y: 0 };\n                var controls = null;\n\n                scope.$on('onStep', function($scope, step) {\n                    console.log('onStep', step.current);\n                    var circle = objects.circles[step.current] || getObjectCircles(step.current);\n                    circle.add();\n                    objects.circles[step.current] = circle;\n                    setTimeout(function() {\n                        if (step.previous !== stepper.current) {\n                            var circle = objects.circles[step.previous];\n                            if (circle) {\n                                circle.remove();\n                            }\n                        }\n                    }, stepper.duration * 1000);\n                    console.log('objects', objects);\n                });\n\n                scope.$on('onOptionsChanged', function($scope) {\n                    // renderer.setClearColor(options.colors.background, 1);\n                    if (audio) {\n                        audio.volume = options.audioVolume;\n                    }\n                    if (objects.ribbon) {\n                        objects.ribbon.updateMaterial();\n                    }\n                    angular.forEach(objects.circles, function(circle) {\n                        if (circle) {\n                            circle.updateMaterial();\n                        }\n                    });\n                    console.log('onOptionsChanged');\n                });\n\n                createScene();\n                // createLights();\n                createObjects();\n                createAnalyser();\n                addListeners();\n                loop();\n\n                function createScene() {\n                    width = window.innerWidth;\n                    height = window.innerHeight;\n                    w2 = width / 2;\n                    h2 = height / 2;\n\n                    var ratio = width / height;\n                    var fov = 30;\n                    var near = 0.001;\n                    var far = 20000;\n\n                    scene = new THREE.Scene();\n                    // scene.fog = new THREE.Fog(0x000000, 300, 1000);\n\n                    var geometry = new THREE.SphereGeometry(5, 32, 32);\n                    var material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n                    var sphere = new THREE.Mesh(geometry, material);\n                    scene.add(sphere);\n\n                    camera = new THREE.PerspectiveCamera(fov, ratio, near, far);\n                    /*\n                    camera.position.z = 100;\n                    camera.position.y = -500;\n                    camera.lookAt(new THREE.Vector3(0, 0, 0));\n                    */\n\n                    renderer = new THREE.WebGLRenderer({\n                        alpha: true,\n                        antialias: true,\n                        logarithmicDepthBuffer: true\n                    });\n\n                    renderer.setClearColor(0x000000, 0); // the default\n                    // renderer.setClearColor(options.colors.background, 1);\n                    renderer.setSize(width, height);\n                    // renderer.shadowMap.enabled = true;\n\n                    stats = new Stats();\n                    element[0].appendChild(renderer.domElement);\n                    element[0].appendChild(stats.dom);\n                }\n\n                function createLights() {\n                    light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.5);\n                    shadow = new THREE.DirectionalLight(0xffffff, 0.8);\n                    shadow.position.set(200, 200, 200);\n                    shadow.castShadow = true;\n                    // shadow.shadowDarkness = .2;\n                    back = new THREE.DirectionalLight(0xffffff, 0.4);\n                    back.position.set(-100, 200, 50);\n                    // back.shadowDarkness = .2;\n                    back.castShadow = true;\n                    scene.add(light);\n                    scene.add(shadow);\n                    scene.add(back);\n                }\n\n                function createObjects() {\n                    objects.ribbon = getObjectRibbon();\n                    objects.circles = new Array(stepper.steps).fill(null);\n                }\n\n                function getObjectRibbon() {\n                    var material = getMaterial();\n\n                    var prev = new THREE.Vector3();\n                    var points = new Array(12).fill(null).map(function() {\n                        var p = new THREE.Vector3().copy(prev);\n                        prev.x += getRandomRange(500, 1000, true);\n                        prev.y += getRandomRange(50, 100, true);\n                        prev.z += getRandomRange(1000, 2000, false);\n                        return p;\n                    });\n\n                    var spline = new THREE.CatmullRomCurve3(points);\n                    spline.type = 'catmullrom';\n                    var geometry = new THREE.Geometry();\n                    geometry.vertices = spline.getPoints(1200);\n\n                    var line = new MeshLine();\n                    line.setGeometry(geometry);\n                    // line.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n                    // line.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n                    // line.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n\n                    var object = new THREE.Mesh(line.geometry, material);\n                    add();\n\n                    function add() {\n                        console.log('objects.ribbon.add');\n                        scene.add(object);\n                    }\n\n                    function remove() {\n                        console.log('objects.ribbon.remove');\n                        scene.remove(object);\n                    }\n\n                    camera.target = camera.target || new THREE.Vector3(0, 0, 0);\n\n                    function update() {\n                        var c = (1 / stepper.steps.length) / 10;\n                        var cpow = stepper.pow;\n                        var tpow = (cpow + c).mod(1);\n\n                        var step = stepper.getCurrentStep();\n\n                        var position = spline.getPointAt(cpow);\n                        position.y += options.cameraHeight;\n                        position.y += step.camera.cameraHeight;\n\n                        var target = spline.getPointAt(tpow);\n                        target.y += options.targetHeight;\n                        target.y += step.camera.targetHeight;\n\n                        camera.position.copy(position);\n                        camera.target.copy(target);\n                        camera.lookAt(camera.target);\n                    }\n\n                    function getMaterial() {\n                        var resolution = new THREE.Vector2(window.innerWidth, window.innerHeight);\n                        return new MeshLineMaterial({\n                            color: new THREE.Color(options.colors.lines),\n                            lineWidth: 5,\n                            depthTest: true,\n                            /*\n                            opacity: 1,\n                            resolution: resolution,\n                            sizeAttenuation: 1,\n                            near: 1,\n                            far: 1000,\n                            blending: THREE.AdditiveBlending,\n                            transparent: false,\n                            side: THREE.DoubleSide,\n                            */\n                        });\n                    }\n\n                    function updateMaterial() {\n                        // !!! non va bene\n                        objects.ribbon.material = getMaterial();\n                        objects.ribbon.object.material = objects.ribbon.material;\n                    }\n\n                    return {\n                        object: object,\n                        spline: spline,\n                        geometry: geometry,\n                        material: material,\n                        add: add,\n                        remove: remove,\n                        update: update,\n                        updateMaterial: updateMaterial,\n                    };\n                }\n\n                function getObjectCircles(index) {\n                    var geometry, object, circles = [];\n\n                    // materials\n                    var material1 = new THREE.LineBasicMaterial({\n                        color: options.colors.lines,\n                    });\n\n                    var material2 = new THREE.LineBasicMaterial({\n                        color: options.colors.overLines,\n                    });\n\n                    var resolution = new THREE.Vector2(window.innerWidth, window.innerHeight);\n\n                    var meshLineMaterial1 = new MeshLineMaterial({\n                        color: new THREE.Color(options.colors.lines),\n                        lineWidth: 1,\n                        depthTest: true,\n                        /*\n                        opacity: 1,\n                        resolution: resolution,\n                        sizeAttenuation: 1,\n                        near: 1,\n                        far: 1000,\n                        blending: THREE.AdditiveBlending,\n                        transparent: false,\n                        side: THREE.DoubleSide,\n                        */\n                    });\n\n                    var meshLineMaterial2 = new MeshLineMaterial({\n                        color: new THREE.Color(0xffffff),\n                        lineWidth: 1,\n                        depthTest: true,\n                        /*\n                        opacity: 1,\n                        resolution: resolution,\n                        sizeAttenuation: 1,\n                        near: 1,\n                        far: 1000,\n                        blending: THREE.AdditiveBlending,\n                        transparent: false,\n                        side: THREE.DoubleSide,\n                        */\n                    });\n\n                    object = new THREE.Object3D();\n\n                    // circle\n                    var step = stepper.steps[index];\n                    var texture = new THREE.TextureLoader().load(step.circle.texture);\n                    texture.wrapS = THREE.RepeatWrapping;\n                    texture.wrapT = THREE.RepeatWrapping;\n                    texture.repeat.set(1, 1);\n                    var material = new THREE.MeshBasicMaterial({\n                        color: 0xffffff,\n                        map: texture,\n                        transparent: true,\n                    });\n                    geometry = new THREE.PlaneGeometry(options.radius * 2 - 20, options.radius * 2 - 20, 8, 8);\n                    var plane = new THREE.Mesh(geometry, material);\n                    object.add(plane);\n                    // circle\n\n                    var points1 = [],\n                        points2 = [],\n                        meshLines1 = [],\n                        meshLines2 = [],\n                        meshLineGeometries1 = [],\n                        meshLineGeometries2 = [],\n                        useMeshLines = false;\n\n                    var pn = options.points,\n                        ln = options.lines;\n\n                    var group1 = new THREE.Object3D();\n                    object.add(group1);\n\n                    var group2 = new THREE.Object3D();\n                    object.add(group2);\n\n                    var lines1 = new Array(ln).fill(null).map(getLine1);\n                    var lines2 = new Array(ln).fill(null).map(getLine2);\n\n                    var state = {\n                        pow: 0,\n                        duration: 0.350,\n                        enabled: false,\n                        adding: false,\n                        removing: false,\n                    };\n\n                    var to = null;\n\n                    function add() {\n                        console.log('objects.circles.add');\n                        scene.add(object);\n                        state.adding = Date.now();\n                        state.removing = false;\n                        state.enabled = true;\n                        if (state.tween) {\n                            state.tween.kill();\n                        }\n                        state.tween = TweenLite.to(state, state.duration, {\n                            pow: 1,\n                            delay: 0,\n                            ease: Power2.easeInOut,\n                            onComplete: function() {\n                                state.adding = false;\n                            },\n                        });\n                    }\n\n                    function remove() {\n                        console.log('objects.circles.remove');\n                        state.adding = false;\n                        state.removing = Date.now();\n                        if (state.tween) {\n                            state.tween.kill();\n                        }\n                        state.tween = TweenLite.to(state, state.duration, {\n                            pow: 0,\n                            delay: 0,\n                            ease: Power2.easeInOut,\n                            onComplete: function() {\n                                state.removing = false;\n                                state.enabled = false;\n                                scene.remove(object);\n                            },\n                        });\n                    }\n\n                    var iterator = 0;\n\n                    function getLine1(v, i) {\n                        var geometry = new THREE.Geometry();\n                        var points = addPoints(geometry, i, 1);\n                        var line = null;\n                        if (useMeshLines) {\n                            var meshLine = new MeshLine();\n                            meshLine.setGeometry(geometry);\n                            meshLineGeometries1.push(geometry);\n                            meshLines1.push(meshLine);\n                            // meshLine.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n                            // meshLine.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n                            // meshLine.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n                            line = new THREE.Mesh(meshLine.geometry, meshLineMaterial1);\n                        } else {\n                            line = new THREE.LineLoop(geometry, material1);\n                        }\n                        points1.push(points);\n                        // var spline = new THREE.CatmullRomCurve3(points);\n                        // circle.spline = spline;\n                        group1.add(line);\n                        return line;\n                    }\n\n                    function getLine2(v, i) {\n                        var geometry = new THREE.Geometry();\n                        var points = addPoints(geometry, i, 2);\n                        var line = null;\n                        if (useMeshLines) {\n                            var meshLine = new MeshLine();\n                            meshLine.setGeometry(geometry);\n                            meshLineGeometries2.push(geometry);\n                            meshLines2.push(meshLine);\n                            // meshLine.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n                            // meshLine.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n                            // meshLine.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal                    \n                            line = new THREE.Mesh(meshLine.geometry, meshLineMaterial2);\n                        } else {\n                            line = new THREE.LineLoop(geometry, material2);\n                        }\n                        points2.push(points);\n                        // var spline = new THREE.CatmullRomCurve3(points);\n                        // circle.spline = spline;\n                        group2.add(line);\n                        return line;\n                    }\n\n                    function addPoints(geometry, l, g) {\n                        var points = new Array(pn).fill(null).map(function(v, i) {\n                            var ratio = i / pn;\n                            var degrees = 360 * ratio; // point degrees;\n                            degrees += 60 * index; // circle offset;\n                            degrees += 30 * g; // group offset;\n                            degrees += (360 / pn * 0.1) * l; // line offset;\n                            var radians = degrees * Math.PI / 180;\n                            var radius = options.radius;\n                            var increment = 0;\n                            if (g === 1) {\n                                increment += (l * l * l * 0.005);\n                            } else {\n                                increment += (l * l * l * 0.005);\n                            }\n                            v = new THREE.Vector3();\n                            v.sincos = {\n                                base: radius,\n                                increment: increment,\n                                radius: radius,\n                                x: Math.cos(radians),\n                                y: Math.sin(radians),\n                            };\n                            geometry.vertices.push(v);\n                            return v;\n                        });\n                        return points;\n                    }\n\n                    function updateLine(geometry, vertices, l, g) {\n                        var audioStrength = options.audioStrength,\n                            noiseStrength = options.noiseStrength,\n                            circularStrength = options.circularStrength,\n                            data = analyserData;\n\n                        angular.forEach(vertices, function(v, i) {\n                            var aia = i % options.bands;\n                            var aib = (pn - 1 - i) % options.bands;\n                            var audioPow = ((data[aia] + data[aib]) / 2) / options.bands;\n                            // var audioPow = data[aia] / options.bands;\n\n                            var nd = g === 1 ? 0 : 64;\n                            var nia = l * pn + ((i + nd + iterator) % pn);\n                            var nib = l * pn + (((pn - 1 - i - nd) + iterator) % pn);\n                            var noisePow = (options.noiseMap[nia] + options.noiseMap[nib]) / 2 / 64;\n\n                            var linePow = 1 - ((ln - l) / ln * circularStrength);\n\n                            var radius = v.sincos.base +\n                                (v.sincos.increment * noisePow) +\n                                (v.sincos.increment * audioPow) +\n                                (noiseStrength * noisePow) * linePow +\n                                (audioStrength * audioPow) * linePow +\n                                // (audioStrength * (3 - g) * audioPow * (l * 0.1)) * linePow +\n                                0;\n\n                            v.sincos.radius = radius;\n                            // v.sincos.radius += (radius - v.sincos.radius) / 2;\n\n                            v.x = v.sincos.x * v.sincos.radius;\n                            v.y = v.sincos.y * v.sincos.radius;\n                            v.z = 0; // -l;\n                            // console.log(v.sincos.radius);\n                        });\n\n                        /*\n                        var f = 0;\n                        var l = pn - 1;\n                        var first = new THREE.Vector3().copy(vertices[f]);\n                        var last = new THREE.Vector3().copy(vertices[l]);\n                        vertices[f].add(new THREE.Vector3().subVectors(first, last).multiplyScalar(0.5));\n                        vertices[l].add(new THREE.Vector3().subVectors(first, last).multiplyScalar(-0.5));\n                        */\n\n                        geometry.verticesNeedUpdate = true;\n\n                        /*\n                                    lines.forEach( function( l, i ) {\n                        if( params.animateWidth ) l.material.uniforms.lineWidth.value = params.lineWidth * ( 1 + .5 * Math.sin( 5 * t + i ) );\n                        if( params.autoRotate ) l.rotation.y += .125 * delta;\n                      l.material.uniforms.visibility.value= params.animateVisibility ? (time/3000) % 1.0 : 1.0;\n                                */\n                        /*\n                        if (iterator === 60 && g === 2 && l === 0) {\n                            console.log('vertices', geometry.vertices.map(function(v) { return v.x + ',' + v.y; }));\n                        }\n                        */\n                    }\n\n                    function update() {\n                        angular.forEach(lines1, function(line, l) {\n                            updateLine(line.geometry, points1[l], l, 1);\n                            if (useMeshLines) {\n                                meshLines1[l].setGeometry(meshLineGeometries1[l]);\n                            }\n                        });\n\n                        angular.forEach(lines2, function(line, l) {\n                            updateLine(line.geometry, points2[l], l, 2);\n                            if (useMeshLines) {\n                                meshLines2[l].setGeometry(meshLineGeometries2[l]);\n                            }\n                        });\n\n                        group1.rotation.z += 0.001;\n                        group2.rotation.z -= 0.001;\n\n                        var step = stepper.getCurrentStep();\n                        var position = objects.ribbon.spline.getPointAt((index + 0.5) / stepper.steps.length);\n                        // position.y += options.cameraHeight;\n\n                        position.add(step.circle.position);\n\n                        object.position.copy(position);\n                        /*\n                        object.position.x += (position.x + Math.random() * 20 - object.position.x) / 20;\n                        object.position.y += (position.y + Math.random() * 20 - object.position.y) / 20;\n                        object.position.z += (position.z + Math.random() * 20 - object.position.z) / 20;\n                        */\n\n                        object.scale.x = object.scale.y = object.scale.z = 0.001 + 0.1 * state.pow;\n                        object.lookAt(camera.position);\n\n                        // iterator++;\n                    }\n\n                    function updateMaterial() {\n                        material.color.setHex(options.colors.lines);\n                        material1.color.setHex(options.colors.lines);\n                        material2.color.setHex(options.colors.overLines);\n                    }\n\n                    return {\n                        add: add,\n                        remove: remove,\n                        object: object,\n                        state: state,\n                        update: update,\n                        updateMaterial: updateMaterial,\n                    };\n                }\n\n                function createAnalyser() {\n                    var source, ctx, actx = (window.AudioContext || window.webkitAudioContext);\n                    source = null;\n                    ctx = new actx();\n                    analyser = ctx.createAnalyser();\n                    audio = new Audio();\n                    audio.src = options.audioUrl;\n                    audio.controls = true;\n                    audio.addEventListener('canplay', function() {\n                        var bufferLength;\n                        console.log('audio canplay');\n                        source = ctx.createMediaElementSource(audio);\n                        source.connect(analyser);\n                        source.connect(ctx.destination);\n                        analyser.fftSize = options.bands * 2;\n                        bufferLength = analyser.frequencyBinCount;\n                        console.log('bufferLength', bufferLength);\n                        analyserData = new Uint8Array(bufferLength);\n                        return analyserData;\n                    });\n                    audio.volume = options.audioVolume;\n                    return audio.play();\n                }\n\n                function updateAnalyser() {\n                    if (analyserData) {\n                        analyser.getByteFrequencyData(analyserData);\n                        angular.forEach(objects.circles, function(circle) {\n                            if (circle && circle.state.enabled) {\n                                circle.update();\n                            }\n                        });\n                    }\n                }\n\n                function render() {\n                    if (controls) {\n                        controls.update();\n                    }\n                    if (objects.ribbon) {\n                        objects.ribbon.update();\n                    }\n                    updateAnalyser();\n                    renderer.render(scene, camera);\n                }\n\n                function loop() {\n                    stats.begin();\n                    render();\n                    stats.end();\n                    requestAnimationFrame(loop);\n                }\n\n                function addListeners() {\n                    function handleMouseMove(event) {\n                        mouse = { x: event.clientX, y: event.clientY };\n                    }\n\n                    function handleMouseDown(event) {\n                        //\n                    }\n\n                    function handleMouseUp(event) {\n                        //\n                    }\n\n                    function handleTouchStart(event) {\n                        if (event.touches.length > 1) {\n                            event.preventDefault();\n                            mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                        }\n                    }\n\n                    function handleTouchEnd(event) {\n                        mousePos = { x: windowHalfX, y: windowHalfY };\n                    }\n\n                    function handleTouchMove(event) {\n                        if (event.touches.length == 1) {\n                            event.preventDefault();\n                            mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                        }\n                    }\n\n                    function onWindowResize() {\n                        width = window.innerWidth;\n                        height = window.innerHeight;\n                        w2 = width / 2;\n                        h2 = height / 2;\n                        renderer.setSize(width, height);\n                        camera.aspect = width / height;\n                        camera.updateProjectionMatrix();\n                    }\n                    window.addEventListener('resize', onWindowResize, false);\n                    /*\n                    document.addEventListener('mousemove', handleMouseMove, false);\n                    document.addEventListener('mousedown', handleMouseDown, false);\n                    document.addEventListener('mouseup', handleMouseUp, false);\n                    document.addEventListener('touchstart', handleTouchStart, false);\n                    document.addEventListener('touchend', handleTouchEnd, false);\n                    document.addEventListener('touchmove', handleTouchMove, false);\n                    */\n                }\n\n            }\n        };\n    }]);\n\n    app.controller('RootCtrl', ['$scope', function($scope) {\n\n        var options, stepper, objects, gui;\n\n        objects = {};\n\n        options = {\n            colors: {\n                background: 0xeae8e8,\n                lines: 0x3353a4,\n                overLines: 0xb4bfdd,\n                notes: 0x3353a4,\n            },\n            cameraHeight: 33,\n            targetHeight: 39,\n            camera: {\n                position: new THREE.Vector3(),\n                target: new THREE.Vector3(),\n            },\n            circle: {\n                position: new THREE.Vector3(),\n            },\n            audioUrl: \"audio/rossini-192.mp3\",\n            audioVolume: 0.01,\n            bands: 128,\n            points: 128,\n            lines: 32,\n            radius: 200,\n            audioStrength: 100,\n            noiseStrength: 25,\n            circularStrength: 0.90,\n            randomize: function() {\n                for (var i = 0; i < gui.__controllers.length; i++) {\n                    var c = gui.__controllers[i];\n                    if (c.__min) {\n                        var value = c.__min + (c.__max - c.__min) * Math.random();\n                        this[c.property] = value;\n                        c.updateDisplay();\n                    }\n                    if (c.__color) {\n                        c.__color.r = Math.floor(Math.random() * 255);\n                        c.__color.g = Math.floor(Math.random() * 255);\n                        c.__color.b = Math.floor(Math.random() * 255);\n                        c.updateDisplay();\n                        c.setValue(c.__color.hex);\n                    }\n                }\n            },\n            saveJson: function() {\n                console.log('saveJson');\n                downloadFile(stepper.steps, 'rossini.js', true, true);\n            }\n        };\n\n        options.noiseMap = getPerlinNoise(options.points, options.lines);\n\n        stepper = getStepper();\n\n        $scope.stepper = stepper;\n        $scope.scene = {\n            options: options,\n            stepper: stepper,\n            objects: objects,\n        };\n\n        addGui();\n\n        onOptionsChanged();\n\n        function onOptionsChanged(params) {\n            var backgroundColor = new THREE.Color(options.colors.background).getHexString();\n            console.log('backgroundColor', backgroundColor);\n            document.body.style.backgroundColor = '#' + backgroundColor;\n            $scope.$broadcast('onOptionsChanged');\n        }\n\n        function onChangePositions(params) {\n            var step = stepper.getCurrentStep();\n            step.camera.cameraHeight = options.cameraHeight;\n            step.camera.targetHeight = options.targetHeight;\n            step.circle.position.copy(options.circle.position);\n            $scope.$broadcast('onChangePositions', step);\n        }\n\n        function addGui() {\n            gui = new dat.GUI();\n            gui.closed = true;\n            gui.add(options, 'cameraHeight', 20.0, 100.0).onChange(onChangePositions);\n            gui.add(options, 'targetHeight', 20.0, 100.0).onChange(onChangePositions);\n            var circlePosition = gui.addFolder('circlePosition');\n            circlePosition.add(options.circle.position, 'x', -300, 300).onChange(onChangePositions);\n            circlePosition.add(options.circle.position, 'y', -300, 300).onChange(onChangePositions);\n            circlePosition.add(options.circle.position, 'z', -300, 300).onChange(onChangePositions);\n            var colors = gui.addFolder('colors');\n            colors.addColor(options.colors, 'background').onChange(onOptionsChanged);\n            colors.addColor(options.colors, 'lines').onChange(onOptionsChanged);\n            colors.addColor(options.colors, 'overLines').onChange(onOptionsChanged);\n            gui.add(options, 'audioVolume', 0.01, 1.0).onChange(onOptionsChanged);\n            gui.add(options, 'audioStrength', 10, 100).onChange(onOptionsChanged);\n            gui.add(options, 'noiseStrength', 10, 100).onChange(onOptionsChanged);\n            gui.add(options, 'circularStrength', 0.01, 0.90).onChange(onOptionsChanged);\n            gui.add(options, 'randomize');\n            gui.add(options, 'saveJson');\n            return gui;\n        }\n\n        function getStepper() {\n            var stepper = {\n                pow: 0,\n                duration: 1.500, // sec\n            };\n\n            var steps = new Array(24).fill().map(function(v, i) {\n                return {\n                    id: i + 1,\n                    name: 'Step ' + (i + 1),\n                    camera: {\n                        cameraHeight: 0,\n                        targetHeight: 0,\n                    },\n                    circle: {\n                        position: new THREE.Vector3(0, 0, 0),\n                        texture: 'img/rossini-01.png',\n                    }\n                };\n            });\n\n            var current = 0;\n\n            function tweenTo(pow, callback) {\n                if (stepper.tween) {\n                    stepper.tween.kill();\n                    stepper.tween = null;\n                }\n                stepper.tween = TweenLite.to(stepper, stepper.duration, {\n                    pow: pow,\n                    delay: 0,\n                    ease: Power2.easeInOut,\n                    onComplete: function() {\n                        if (callback) {\n                            callback();\n                        }\n                    },\n                });\n            }\n\n            function setStep(index) {\n                var previous = stepper.current || 0;\n                stepper.current = index;\n                var step = steps[index];\n                options.cameraHeight = step.camera.cameraHeight;\n                options.targetHeight = step.camera.targetHeight;\n                options.circle.position.copy(step.circle.position);\n                $scope.$broadcast('onStep', { current: index, previous: previous });\n                tweenTo(index / steps.length, function() {\n                    stepper.tween = null;\n                });\n            }\n\n            function next() {\n                current++;\n                current = Math.min(steps.length - 1, current);\n                // current = current % steps.length;\n                setStep(current);\n            }\n\n            function previous() {\n                current--;\n                current = Math.max(0, current);\n                // current = current % steps.length;\n                setStep(current);\n            }\n\n            function getCurrentStep() {\n                return steps[current];\n            }\n\n            return angular.extend(stepper, {\n                steps: steps,\n                current: current,\n                next: next,\n                previous: previous,\n                getCurrentStep: getCurrentStep,\n            });\n        }\n\n    }]);\n\n    app.controller('___SceneCtrl', ['$scope', function($scope) {\n\n        var OBJECTS = {};\n\n        var options = {\n            colors: {\n                background: 0xeae8e8,\n                lines: 0x3353a4,\n                overLines: 0xb4bfdd,\n                notes: 0x3353a4,\n            },\n            cameraHeight: 33,\n            targetHeight: 39,\n            camera: {\n                position: new THREE.Vector3(),\n                target: new THREE.Vector3(),\n            },\n            circle: {\n                position: new THREE.Vector3(),\n            },\n            audioUrl: \"audio/rossini-192.mp3\",\n            audioVolume: 0.01,\n            bands: 128,\n            points: 128,\n            lines: 32,\n            radius: 200,\n            audioStrength: 100,\n            noiseStrength: 25,\n            circularStrength: 0.90,\n            randomize: function() {\n                for (var i = 0; i < gui.__controllers.length; i++) {\n                    var c = gui.__controllers[i];\n                    if (c.__min) {\n                        var value = c.__min + (c.__max - c.__min) * Math.random();\n                        this[c.property] = value;\n                        c.updateDisplay();\n                    }\n                    if (c.__color) {\n                        c.__color.r = Math.floor(Math.random() * 255);\n                        c.__color.g = Math.floor(Math.random() * 255);\n                        c.__color.b = Math.floor(Math.random() * 255);\n                        c.updateDisplay();\n                        c.setValue(c.__color.hex);\n                    }\n                }\n            },\n            saveJson: function() {\n                console.log('saveJson');\n                downloadFile(stepper.steps, 'rossini.js', true, true);\n            }\n        };\n\n        options.noiseMap = getPerlinNoise(options.points, options.lines);\n\n        function getStepper() {\n            var stepper = {\n                pow: 0,\n                duration: 1.500, // sec\n            };\n\n            var steps = new Array(24).fill().map(function(v, i) {\n                return {\n                    id: i + 1,\n                    name: 'Step ' + (i + 1),\n                    camera: {\n                        cameraHeight: 0,\n                        targetHeight: 0,\n                    },\n                    circle: {\n                        position: new THREE.Vector3(0, 0, 0),\n                        texture: 'img/rossini-01.png',\n                    }\n                };\n            });\n\n            var current = 0;\n\n            function tweenTo(pow, callback) {\n                if (stepper.tween) {\n                    stepper.tween.kill();\n                    stepper.tween = null;\n                }\n                stepper.tween = TweenLite.to(stepper, stepper.duration, {\n                    pow: pow,\n                    delay: 0,\n                    ease: Power2.easeInOut,\n                    onComplete: function() {\n                        if (callback) {\n                            callback();\n                        }\n                    },\n                });\n            }\n\n            function setStep(index) {\n                var previous = stepper.current || 0;\n                stepper.current = index;\n                var step = steps[index];\n                options.cameraHeight = step.camera.cameraHeight;\n                options.targetHeight = step.camera.targetHeight;\n                options.circle.position.copy(step.circle.position);\n\n                var circle = OBJECTS.circles[index] || getObjectCircles(index);\n                circle.add();\n                OBJECTS.circles[index] = circle;\n                tweenTo(index / steps.length, function() {\n                    stepper.tween = null;\n                });\n                setTimeout(function() {\n                    if (previous !== stepper.current) {\n                        var circle = OBJECTS.circles[previous];\n                        if (circle) {\n                            circle.remove();\n                        }\n                    }\n                }, stepper.duration * 1000);\n            }\n\n            function next() {\n                current++;\n                current = Math.min(steps.length - 1, current);\n                // current = current % steps.length;\n                setStep(current);\n            }\n\n            function previous() {\n                current--;\n                current = Math.max(0, current);\n                // current = current % steps.length;\n                setStep(current);\n            }\n\n            function getCurrentStep() {\n                return steps[current];\n            }\n\n            return angular.extend(stepper, {\n                steps: steps,\n                current: current,\n                next: next,\n                previous: previous,\n                getCurrentStep: getCurrentStep,\n            });\n        }\n\n        var stepper = getStepper();\n        $scope.stepper = stepper;\n\n        var analyser, analyserData, audio;\n        var stats, gui, scene, camera, fov, ratio, near, far, shadow, back, light, renderer, container, width, height, w2, h2, mouse = { x: 0, y: 0 };\n        var controls = null;\n\n\n        function onChange(params) {\n            // renderer.setClearColor(options.colors.background, 1);\n            if (audio) {\n                audio.volume = options.audioVolume;\n            }\n            var backgroundColor = new THREE.Color(options.colors.background).getHexString();\n            console.log('backgroundColor', backgroundColor);\n            document.body.style.backgroundColor = '#' + backgroundColor;\n            if (OBJECTS.ribbon) {\n                OBJECTS.ribbon.updateMaterial();\n            }\n            angular.forEach(OBJECTS.circles, function(circle) {\n                if (circle) {\n                    circle.updateMaterial();\n                }\n            });\n        }\n\n        function onChangePositions(params) {\n            var step = stepper.getCurrentStep();\n            step.camera.cameraHeight = options.cameraHeight;\n            step.camera.targetHeight = options.targetHeight;\n            step.circle.position.copy(options.circle.position);\n        }\n\n        function createLights() {\n            light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.5);\n            shadow = new THREE.DirectionalLight(0xffffff, 0.8);\n            shadow.position.set(200, 200, 200);\n            shadow.castShadow = true;\n            // shadow.shadowDarkness = .2;\n            back = new THREE.DirectionalLight(0xffffff, 0.4);\n            back.position.set(-100, 200, 50);\n            // back.shadowDarkness = .2;\n            back.castShadow = true;\n            scene.add(light);\n            scene.add(shadow);\n            scene.add(back);\n        }\n\n        function createScene() {\n            width = window.innerWidth;\n            height = window.innerHeight;\n            ratio = width / height;\n            w2 = width / 2;\n            h2 = height / 2;\n            fov = 30;\n            near = 0.001;\n            far = 20000;\n\n            scene = new THREE.Scene();\n            // scene.fog = new THREE.Fog(0x000000, 300, 1000);\n\n            camera = new THREE.PerspectiveCamera(fov, ratio, near, far);\n            camera.position.z = 100;\n            camera.position.y = -500;\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\n            renderer = new THREE.WebGLRenderer({\n                alpha: true,\n                antialias: true,\n                logarithmicDepthBuffer: true\n            });\n            renderer.setClearColor(0x000000, 0); // the default\n            // renderer.setClearColor(options.colors.background, 1);\n            renderer.setSize(width, height);\n            renderer.shadowMap.enabled = true;\n            container = document.getElementById('scene');\n            container.appendChild(renderer.domElement);\n\n            stats = new Stats();\n            container.appendChild(stats.dom);\n\n            addListeners();\n            // controls = new THREE.OrbitControls(camera, renderer.domElement);\n        }\n\n        function getObjectRibbon() {\n            var material = getMaterial();\n\n            var prev = new THREE.Vector3();\n            var points = new Array(12).fill(null).map(function() {\n                var p = new THREE.Vector3().copy(prev);\n                prev.x += getRandomRange(500, 1000, true);\n                prev.y += getRandomRange(50, 100, true);\n                prev.z += getRandomRange(1000, 2000, false);\n                return p;\n            });\n\n            var spline = new THREE.CatmullRomCurve3(points);\n            spline.type = 'catmullrom';\n            // spline.closed = true;\n\n            /*\n            var cameraHeight = options.cameraHeight;\n            var cameraSpline = new THREE.CatmullRomCurve3(spline.points.map(function(p) {\n                return new THREE.Vector3(p.x, p.y + cameraHeight, p.z);\n            }));\n            cameraSpline.type = 'catmullrom';\n            // cameraSpline.closed = true;\n\n            var targetHeight = options.targetHeight;\n            var targetSpline = new THREE.CatmullRomCurve3(spline.points.map(function(p) {\n                return new THREE.Vector3(p.x, p.y + targetHeight, p.z);\n            }));\n            targetSpline.type = 'catmullrom';\n            // targetSpline.closed = true;\n            */\n\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(1200);\n\n            var line = new MeshLine();\n            line.setGeometry(geometry);\n            // line.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n            // line.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n            // line.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n\n            var object = new THREE.Mesh(line.geometry, material);\n            // var object = new THREE.Object3D();\n            // object.add(mesh);\n            scene.add(object);\n\n            function add() {\n                console.log('OBJECTS.ribbon.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.ribbon.remove');\n                scene.remove(object);\n            }\n\n            camera.target = camera.target || new THREE.Vector3(0, 0, 0);\n\n            function update() {\n                var c = (1 / stepper.steps.length) / 10;\n                var cpow = stepper.pow;\n                var tpow = (cpow + c).mod(1);\n\n                var position = spline.getPointAt(cpow);\n                position.y += options.cameraHeight;\n\n                var target = spline.getPointAt(tpow);\n                target.y += options.targetHeight;\n\n                var step = stepper.getCurrentStep();\n                position.y += step.camera.cameraHeight;\n                target.y += step.camera.cameraTarget;\n\n                camera.position.copy(position);\n                camera.target.copy(target);\n                camera.lookAt(camera.target);\n            }\n\n            function getMaterial() {\n                var resolution = new THREE.Vector2(window.innerWidth, window.innerHeight);\n                return new MeshLineMaterial({\n                    color: new THREE.Color(options.colors.lines),\n                    lineWidth: 5,\n                    depthTest: true,\n                    /*\n                    opacity: 1,\n                    resolution: resolution,\n                    sizeAttenuation: 1,\n                    near: 1,\n                    far: 1000,\n                    blending: THREE.AdditiveBlending,\n                    transparent: false,\n                    side: THREE.DoubleSide,\n                    */\n                });\n            }\n\n            function updateMaterial() {\n                // !!! non va bene\n                OBJECTS.ribbon.material = getMaterial();\n                OBJECTS.ribbon.object.material = OBJECTS.ribbon.material;\n            }\n\n            return {\n                object: object,\n                spline: spline,\n                geometry: geometry,\n                material: material,\n                add: add,\n                remove: remove,\n                update: update,\n                updateMaterial: updateMaterial,\n            };\n        }\n\n        function getObjectCircles(index) {\n            var geometry, object, circles = [];\n\n            // materials\n            var material1 = new THREE.LineBasicMaterial({\n                color: options.colors.lines,\n            });\n\n            var material2 = new THREE.LineBasicMaterial({\n                color: options.colors.overLines,\n            });\n\n            var resolution = new THREE.Vector2(window.innerWidth, window.innerHeight);\n\n            var meshLineMaterial1 = new MeshLineMaterial({\n                color: new THREE.Color(options.colors.lines),\n                lineWidth: 1,\n                depthTest: true,\n                /*\n                opacity: 1,\n                resolution: resolution,\n                sizeAttenuation: 1,\n                near: 1,\n                far: 1000,\n                blending: THREE.AdditiveBlending,\n                transparent: false,\n                side: THREE.DoubleSide,\n                */\n            });\n\n            var meshLineMaterial2 = new MeshLineMaterial({\n                color: new THREE.Color(0xffffff),\n                lineWidth: 1,\n                depthTest: true,\n                /*\n                opacity: 1,\n                resolution: resolution,\n                sizeAttenuation: 1,\n                near: 1,\n                far: 1000,\n                blending: THREE.AdditiveBlending,\n                transparent: false,\n                side: THREE.DoubleSide,\n                */\n            });\n\n            object = new THREE.Object3D();\n\n            // sphere\n            var step = stepper.steps[index];\n            var texture = new THREE.TextureLoader().load(step.circle.texture);\n            texture.wrapS = THREE.RepeatWrapping;\n            texture.wrapT = THREE.RepeatWrapping;\n            texture.repeat.set(1, 1);\n            var material = new THREE.MeshBasicMaterial({\n                color: 0xffffff,\n                map: texture,\n                transparent: true,\n            });\n\n            /*\n            geometry = new THREE.IcosahedronGeometry(options.radius - 5, 3); // radius, detail\n            var sphere = new THREE.Mesh(geometry, material);\n            sphere.scale.z = 0.001;\n            object.add(sphere);\n            */\n\n            geometry = new THREE.PlaneGeometry(options.radius * 2 - 20, options.radius * 2 - 20, 8, 8);\n            var plane = new THREE.Mesh(geometry, material);\n            object.add(plane);\n            // sphere\n\n            var points1 = [],\n                points2 = [],\n                meshLines1 = [],\n                meshLines2 = [],\n                meshLineGeometries1 = [],\n                meshLineGeometries2 = [],\n                useMeshLines = false;\n\n            var pn = options.points,\n                ln = options.lines;\n\n            var group1 = new THREE.Object3D();\n            object.add(group1);\n\n            var group2 = new THREE.Object3D();\n            object.add(group2);\n\n            var lines1 = new Array(ln).fill(null).map(getLine1);\n            var lines2 = new Array(ln).fill(null).map(getLine2);\n\n            // console.log('lines2', lines2[lines2.length - 1].geometry.vertices[0]);\n\n            var state = {\n                pow: 0,\n                duration: 0.350,\n                enabled: false,\n                adding: false,\n                removing: false,\n            };\n\n            var to = null;\n\n            function add() {\n                console.log('OBJECTS.circles.add');\n                scene.add(object);\n                state.adding = Date.now();\n                state.removing = false;\n                state.enabled = true;\n                if (state.tween) {\n                    state.tween.kill();\n                }\n                state.tween = TweenLite.to(state, state.duration, {\n                    pow: 1,\n                    delay: 0,\n                    ease: Power2.easeInOut,\n                    onComplete: function() {\n                        state.adding = false;\n                    },\n                });\n            }\n\n            function remove() {\n                console.log('OBJECTS.circles.remove');\n                state.adding = false;\n                state.removing = Date.now();\n                if (state.tween) {\n                    state.tween.kill();\n                }\n                state.tween = TweenLite.to(state, state.duration, {\n                    pow: 0,\n                    delay: 0,\n                    ease: Power2.easeInOut,\n                    onComplete: function() {\n                        state.removing = false;\n                        state.enabled = false;\n                        scene.remove(object);\n                    },\n                });\n            }\n\n            var iterator = 0;\n\n            function getLine1(v, i) {\n                var geometry = new THREE.Geometry();\n                var points = addPoints(geometry, i, 1);\n                var line = null;\n                if (useMeshLines) {\n                    var meshLine = new MeshLine();\n                    meshLine.setGeometry(geometry);\n                    meshLineGeometries1.push(geometry);\n                    meshLines1.push(meshLine);\n                    // meshLine.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n                    // meshLine.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n                    // meshLine.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n                    line = new THREE.Mesh(meshLine.geometry, meshLineMaterial1);\n                } else {\n                    line = new THREE.LineLoop(geometry, material1);\n                }\n                points1.push(points);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // circle.spline = spline;\n                group1.add(line);\n                return line;\n            }\n\n            function getLine2(v, i) {\n                var geometry = new THREE.Geometry();\n                var points = addPoints(geometry, i, 2);\n                var line = null;\n                if (useMeshLines) {\n                    var meshLine = new MeshLine();\n                    meshLine.setGeometry(geometry);\n                    meshLineGeometries2.push(geometry);\n                    meshLines2.push(meshLine);\n                    // meshLine.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n                    // meshLine.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n                    // meshLine.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal                    \n                    line = new THREE.Mesh(meshLine.geometry, meshLineMaterial2);\n                } else {\n                    line = new THREE.LineLoop(geometry, material2);\n                }\n                points2.push(points);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // circle.spline = spline;\n                group2.add(line);\n                return line;\n            }\n\n            function addPoints(geometry, l, g) {\n                var points = new Array(pn).fill(null).map(function(v, i) {\n                    var ratio = i / pn;\n                    var degrees = 360 * ratio; // point degrees;\n                    degrees += 60 * index; // circle offset;\n                    degrees += 30 * g; // group offset;\n                    degrees += (360 / pn * 0.1) * l; // line offset;\n                    var radians = degrees * Math.PI / 180;\n                    var radius = options.radius;\n                    var increment = 0;\n                    if (g === 1) {\n                        increment += (l * l * l * 0.005);\n                    } else {\n                        increment += (l * l * l * 0.005);\n                    }\n                    v = new THREE.Vector3();\n                    v.sincos = {\n                        base: radius,\n                        increment: increment,\n                        radius: radius,\n                        x: Math.cos(radians),\n                        y: Math.sin(radians),\n                    };\n                    geometry.vertices.push(v);\n                    return v;\n                });\n                return points;\n            }\n\n            function updateLine(geometry, vertices, l, g) {\n                var audioStrength = options.audioStrength,\n                    noiseStrength = options.noiseStrength,\n                    circularStrength = options.circularStrength,\n                    data = analyserData;\n\n                angular.forEach(vertices, function(v, i) {\n                    var aia = i % options.bands;\n                    var aib = (pn - 1 - i) % options.bands;\n                    var audioPow = ((data[aia] + data[aib]) / 2) / options.bands;\n                    // var audioPow = data[aia] / options.bands;\n\n                    var nd = g === 1 ? 0 : 64;\n                    var nia = l * pn + ((i + nd + iterator) % pn);\n                    var nib = l * pn + (((pn - 1 - i - nd) + iterator) % pn);\n                    var noisePow = (options.noiseMap[nia] + options.noiseMap[nib]) / 2 / 64;\n\n                    var linePow = 1 - ((ln - l) / ln * circularStrength);\n\n                    var radius = v.sincos.base +\n                        (v.sincos.increment * noisePow) +\n                        (v.sincos.increment * audioPow) +\n                        (noiseStrength * noisePow) * linePow +\n                        (audioStrength * audioPow) * linePow +\n                        // (audioStrength * (3 - g) * audioPow * (l * 0.1)) * linePow +\n                        0;\n\n                    v.sincos.radius = radius;\n                    // v.sincos.radius += (radius - v.sincos.radius) / 2;\n\n                    v.x = v.sincos.x * v.sincos.radius;\n                    v.y = v.sincos.y * v.sincos.radius;\n                    v.z = 0; // -l;\n                    // console.log(v.sincos.radius);\n                });\n\n                /*\n                var f = 0;\n                var l = pn - 1;\n                var first = new THREE.Vector3().copy(vertices[f]);\n                var last = new THREE.Vector3().copy(vertices[l]);\n                vertices[f].add(new THREE.Vector3().subVectors(first, last).multiplyScalar(0.5));\n                vertices[l].add(new THREE.Vector3().subVectors(first, last).multiplyScalar(-0.5));\n                */\n\n                geometry.verticesNeedUpdate = true;\n\n                /*\n                \tlines.forEach( function( l, i ) {\n\t\tif( params.animateWidth ) l.material.uniforms.lineWidth.value = params.lineWidth * ( 1 + .5 * Math.sin( 5 * t + i ) );\n\t\tif( params.autoRotate ) l.rotation.y += .125 * delta;\n      l.material.uniforms.visibility.value= params.animateVisibility ? (time/3000) % 1.0 : 1.0;\n                */\n                /*\n                if (iterator === 60 && g === 2 && l === 0) {\n                    console.log('vertices', geometry.vertices.map(function(v) { return v.x + ',' + v.y; }));\n                }\n                */\n            }\n\n            function update() {\n                angular.forEach(lines1, function(line, l) {\n                    updateLine(line.geometry, points1[l], l, 1);\n                    if (useMeshLines) {\n                        meshLines1[l].setGeometry(meshLineGeometries1[l]);\n                    }\n                });\n\n                angular.forEach(lines2, function(line, l) {\n                    updateLine(line.geometry, points2[l], l, 2);\n                    if (useMeshLines) {\n                        meshLines2[l].setGeometry(meshLineGeometries2[l]);\n                    }\n                });\n\n                group1.rotation.z += 0.001;\n                group2.rotation.z -= 0.001;\n\n                var step = stepper.getCurrentStep();\n                var position = OBJECTS.ribbon.spline.getPointAt((index + 0.5) / stepper.steps.length);\n                // position.y += options.cameraHeight;\n\n                position.add(step.circle.position);\n\n                object.position.copy(position);\n                /*\n                object.position.x += (position.x + Math.random() * 20 - object.position.x) / 20;\n                object.position.y += (position.y + Math.random() * 20 - object.position.y) / 20;\n                object.position.z += (position.z + Math.random() * 20 - object.position.z) / 20;\n                */\n\n                object.scale.x = object.scale.y = object.scale.z = 0.001 + 0.1 * state.pow;\n                object.lookAt(camera.position);\n\n                // iterator++;\n            }\n\n            function updateMaterial() {\n                material.color.setHex(options.colors.lines);\n                material1.color.setHex(options.colors.lines);\n                material2.color.setHex(options.colors.overLines);\n            }\n\n            return {\n                add: add,\n                remove: remove,\n                object: object,\n                state: state,\n                update: update,\n                updateMaterial: updateMaterial,\n            };\n        }\n        /*\n                function getObjectCirclesBak(index) {\n                    var geometry, material, object, circles = [];\n\n                    object = new THREE.Object3D();\n\n                    geometry = new THREE.IcosahedronGeometry(90, 3); // radius, detail\n                    material = new THREE.MeshBasicMaterial({\n                        color: 0xffff00,\n                    });\n                    var sphere = new THREE.Mesh(geometry, material);\n                    object.add(sphere);\n\n                    material = new THREE.LineBasicMaterial({\n                        color: options.colors.lines\n                    });\n\n                    var pn = options.points;\n\n                    while (circles.length < pn) {\n                        geometry = new THREE.Geometry();\n                        var circle = new THREE.LineLoop(geometry, material);\n                        circle.points = new Array(pn).fill(null);\n                        // var spline = new THREE.CatmullRomCurve3(points);\n                        // circle.spline = spline;\n                        circles.push(circle);\n                        object.add(circle);\n                    }\n                    var points = new Array(pn * pn).fill(null).map(function(n, i) {\n                        var r = Math.floor(i / pn);\n                        var c = i - r * pn;\n                        var angle = 2 * Math.PI / pn;\n                        var rad = angle * r + angle * c * 0.1;\n                        var point = new THREE.Vector3();\n                        point.r = {\n                            x: Math.cos(rad),\n                            y: Math.sin(rad),\n                            z: 96 + (c * c * c * 0.0001),\n                        };\n                        circles[c].points[r] = point;\n                        circles[c].geometry.vertices.push(point);\n                        return point;\n                    });\n\n                    var state = {\n                        pow: 0,\n                        duration: 0.350,\n                        enabled: false,\n                        adding: false,\n                        removing: false,\n                    };\n\n                    var to = null;\n\n                    function add() {\n                        console.log('OBJECTS.circles.add');\n                        scene.add(object);\n                        state.adding = Date.now();\n                        state.removing = false;\n                        state.enabled = true;\n                        if (state.tween) {\n                            state.tween.kill();\n                        }\n                        state.tween = TweenLite.to(state, state.duration, {\n                            pow: 1,\n                            delay: 0,\n                            ease: Power2.easeInOut,\n                            onComplete: function() {\n                                state.adding = false;\n                            },\n                        });\n                    }\n\n                    function remove() {\n                        console.log('OBJECTS.circles.remove');\n                        state.adding = false;\n                        state.removing = Date.now();\n                        if (state.tween) {\n                            state.tween.kill();\n                        }\n                        state.tween = TweenLite.to(state, state.duration, {\n                            pow: 0,\n                            delay: 0,\n                            ease: Power2.easeInOut,\n                            onComplete: function() {\n                                state.removing = false;\n                                state.enabled = false;\n                                scene.remove(object);\n                            },\n                        });\n                    }\n\n                    var d = 0;\n\n                    function update() {\n                        var audioStrength = options.audioStrength,\n                            noiseStrength = options.noiseStrength,\n                            circularStrength = options.circularStrength;\n                        angular.forEach(points, function(v, i) {\n                            var r = Math.floor(i / pn);\n                            var c = i - r * pn;\n                            var b = Math.abs(c - pn / 2) * 2;\n                            var dr = 1 - (Math.abs(r - pn / 2) / (pn / 2));\n                            var dc = 1 - (Math.abs(c - pn / 2) / (pn / 2));\n                            var drc = (dr + dc) / 2;\n                            var ai = r % options.bands;\n                            var pow = (analyserData[ai] + analyserData[pn - 1 - ai]) / 2;\n                            var scale = pow / options.bands;\n                            var na = c * pn + ((r + d) % pn);\n                            var noise = options.noiseMap[na];\n                            var cpow = 1 - ((pn - c) / pn * circularStrength);\n                            var level = v.r.z + (noise / 64 * noiseStrength) * cpow + (audioStrength * 2 * scale * scale) * cpow;\n                            var radius = v.radius || level;\n                            radius += (level - radius) / 2;\n                            v.x = v.r.x * radius;\n                            v.y = v.r.y * radius;\n                            v.z = 0; // -c;\n                            v.radius = radius;\n                        });\n                        angular.forEach(circles, function(circle, l) {\n                            // var points = circle.points;\n                            // var spline = circle.spline;\n                            // spline.getPoints(pn * 2);\n                            // circle.geometry.vertices = points;\n                            // geometry.computeLineDistances();\n                            // geometry.lineDistancesNeedUpdate = true;\n                            circle.geometry.verticesNeedUpdate = true;\n                        });\n                        object.scale.x = object.scale.y = object.scale.z = 0.001 + 0.3 * state.pow;\n                        object.lookAt(camera.position);\n                        // d++;\n                    }\n\n                    var position = OBJECTS.ribbon.cameraSpline.getPointAt((index + 0.5) / stepper.steps.length);\n\n                    object.position.copy(position);\n\n                    return {\n                        add: add,\n                        remove: remove,\n                        update: update,\n                        object: object,\n                        material: material,\n                        state: state,\n                    };\n                }\n        */\n        function createObjects() {\n            // OBJECTS.tube = getObjectTube();\n            OBJECTS.ribbon = getObjectRibbon();\n            OBJECTS.circles = new Array(stepper.steps).fill(null);\n        }\n\n        function createAnalyser() {\n            var source, ctx, actx = (window.AudioContext || window.webkitAudioContext);\n            source = null;\n            ctx = new actx();\n            analyser = ctx.createAnalyser();\n            audio = new Audio();\n            audio.src = options.audioUrl;\n            audio.controls = true;\n            audio.addEventListener('canplay', function() {\n                var bufferLength;\n                console.log('audio canplay');\n                source = ctx.createMediaElementSource(audio);\n                source.connect(analyser);\n                source.connect(ctx.destination);\n                analyser.fftSize = options.bands * 2;\n                bufferLength = analyser.frequencyBinCount;\n                console.log('bufferLength', bufferLength);\n                analyserData = new Uint8Array(bufferLength);\n                return analyserData;\n            });\n            audio.volume = options.audioVolume;\n            return audio.play();\n        }\n\n        function updateAnalyser() {\n            if (analyserData) {\n                analyser.getByteFrequencyData(analyserData);\n                angular.forEach(OBJECTS.circles, function(circle) {\n                    if (circle && circle.state.enabled) {\n                        circle.update();\n                    }\n                });\n            }\n        }\n\n        function loop() {\n            stats.begin();\n            render();\n            stats.end();\n            requestAnimationFrame(loop);\n        }\n\n        function render() {\n            if (controls) {\n                controls.update();\n            }\n            if (OBJECTS.tube) {\n                OBJECTS.tube.update();\n            }\n            if (OBJECTS.ribbon) {\n                OBJECTS.ribbon.update();\n            }\n            updateAnalyser();\n            renderer.render(scene, camera);\n        }\n\n        createScene();\n        // createLights();\n        createObjects();\n        createAnalyser();\n        addGui();\n        onChange();\n        loop();\n\n        function addGui() {\n            gui = new dat.GUI();\n            gui.closed = true;\n            gui.add(options, 'cameraHeight', 20.0, 100.0).onChange(onChangePositions);\n            gui.add(options, 'targetHeight', 20.0, 100.0).onChange(onChangePositions);\n            var circlePosition = gui.addFolder('circlePosition');\n            circlePosition.add(options.circle.position, 'x', -300, 300).onChange(onChangePositions);\n            circlePosition.add(options.circle.position, 'y', -300, 300).onChange(onChangePositions);\n            circlePosition.add(options.circle.position, 'z', -300, 300).onChange(onChangePositions);\n            var colors = gui.addFolder('colors');\n            colors.addColor(options.colors, 'background').onChange(onChange);\n            colors.addColor(options.colors, 'lines').onChange(onChange);\n            colors.addColor(options.colors, 'overLines').onChange(onChange);\n            gui.add(options, 'audioVolume', 0.01, 1.0).onChange(onChange);\n            gui.add(options, 'audioStrength', 10, 100).onChange(onChange);\n            gui.add(options, 'noiseStrength', 10, 100).onChange(onChange);\n            gui.add(options, 'circularStrength', 0.01, 0.90).onChange(onChange);\n            gui.add(options, 'randomize');\n            gui.add(options, 'saveJson');\n            return gui;\n        }\n\n        function addListeners() {\n            function handleMouseMove(event) {\n                mouse = { x: event.clientX, y: event.clientY };\n            }\n\n            function handleMouseDown(event) {\n                //\n            }\n\n            function handleMouseUp(event) {\n                //\n            }\n\n            function handleTouchStart(event) {\n                if (event.touches.length > 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function handleTouchEnd(event) {\n                mousePos = { x: windowHalfX, y: windowHalfY };\n            }\n\n            function handleTouchMove(event) {\n                if (event.touches.length == 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function onWindowResize() {\n                width = window.innerWidth;\n                height = window.innerHeight;\n                w2 = width / 2;\n                h2 = height / 2;\n                renderer.setSize(width, height);\n                camera.aspect = width / height;\n                camera.updateProjectionMatrix();\n            }\n            window.addEventListener('resize', onWindowResize, false);\n            /*\n            document.addEventListener('mousemove', handleMouseMove, false);\n            document.addEventListener('mousedown', handleMouseDown, false);\n            document.addEventListener('mouseup', handleMouseUp, false);\n            document.addEventListener('touchstart', handleTouchStart, false);\n            document.addEventListener('touchend', handleTouchEnd, false);\n            document.addEventListener('touchmove', handleTouchMove, false);\n            */\n        }\n\n        function getSprite() {\n            var canvas = document.createElement('canvas');\n            canvas.width = 128;\n            canvas.height = 128;\n            var ctx = canvas.getContext('2d');\n            var gradient = ctx.createRadialGradient(\n                canvas.width / 2,\n                canvas.height / 2,\n                0,\n                canvas.width / 2,\n                canvas.height / 2,\n                canvas.width / 2\n            );\n            /*\n            gradient.addColorStop(0, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.2, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.22, 'rgba(0,0,0,.2)');\n            gradient.addColorStop(1, 'rgba(0,0,0,0)');\n            ctx.fillStyle = gradient;\n            */\n            ctx.fillStyle = \"#000000\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            return canvas;\n        }\n\n        function getObjectTube() {\n            var options = {\n                path: spline,\n                tubularSegments: 500,\n                radius: 1,\n                radiusSegments: 2,\n                closed: true,\n            }\n            var spline = new THREE.CatmullRomCurve3([\n                new THREE.Vector3(-400, -400, 0),\n                new THREE.Vector3(400, -400, 0),\n                new THREE.Vector3(1400, -400, 0),\n                new THREE.Vector3(400, 400, 0),\n                new THREE.Vector3(-400, 400, 0)\n            ]);\n            spline.type = 'catmullrom';\n            spline.closed = true;\n\n            var object = new THREE.Object3D();\n            scene.add(object);\n\n            var material = new THREE.MeshLambertMaterial({\n                color: 0xffffff\n            });\n            var geometry = new THREE.TubeBufferGeometry(spline, options.tubularSegments, options.radius, options.radiusSegments, options.closed);\n            var group = new THREE.Mesh(geometry, material);\n            object.add(group);\n\n            // if (group !== undefined) {\n            //     object.remove(group);\n            //     group.children[0].geometry.dispose();\n            //     group.children[1].geometry.dispose();\n            // }            \n\n            /*\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(500);\n            var line = new MeshLine();\n            line.setGeometry(geometry);\n            // line.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n            // line.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n            // line.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n            var material = new MeshLineMaterial({\n                color: new THREE.Color(0xffffff),\n                lineWidth: 4,\n            });\n            var mesh = new THREE.Mesh(line.geometry, material);\n            object.add(mesh);\n            */\n\n            function add() {\n                console.log('OBJECTS.tube.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.tube.remove');\n                scene.remove(object);\n            }\n\n            var d = 0; // iterator\n            var a = new THREE.Vector3(); // normal\n            var b = new THREE.Vector3(); // binormal\n\n            function update() {\n                var duration = 20 * 1000;\n                var scale = 1;\n                var offset = 15;\n                var lookAhead = true;\n                var msec = Date.now();\n                var pow = (msec % duration) / duration;\n                var dir = spline.getTangentAt(pow);\n                var tangents = geometry.tangents;\n                var binormals = geometry.binormals;\n                var x = pow * tangents.length;\n                var c = Math.floor(x);\n                var n = (c + 1) % tangents.length;\n                b.subVectors(binormals[n], binormals[c]);\n                b.multiplyScalar(x - c).add(binormals[c]);\n                a.copy(b).cross(dir);\n                var p = spline.getPointAt(pow);\n                p.multiplyScalar(scale);\n                p.add(a.clone().multiplyScalar(offset));\n                camera.position.copy(p);\n                var lookAt;\n                if (lookAhead) {\n                    // using arclength for stablization in look ahead\n                    lookAt = spline.getPointAt((pow + 30 / spline.getLength()) % 1).multiplyScalar(scale);\n                } else {\n                    // camera orientation 2 - up orientation via normal\n                    lookAt = new THREE.Vector3().copy(p).add(dir);\n                }\n                camera.matrix.lookAt(camera.position, lookAt, a);\n                camera.rotation.setFromRotationMatrix(camera.matrix, camera.rotation.order);\n                d++;\n            }\n\n            return {\n                object: object,\n                spline: spline,\n                geometry: geometry,\n                add: add,\n                remove: remove,\n                update: update,\n            };\n        }\n\n    }]);\n\n}());"]}