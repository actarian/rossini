{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","config","$httpProvider","$locationProvider","html5Mode","hashPrefix","run","$rootScope","controller","$scope","onChange","params","audio","volume","options","audioVolume","backgroundColor","THREE","Color","colors","background","getHexString","console","log","document","body","style","OBJECTS","ribbon","updateMaterial","forEach","circles","circle","onChangePositions","step","stepper","getCurrentStep","camera","position","copy","target","getRandomRange","min","max","allowNegatives","n","Math","random","a","abs","floor","getObjectRibbon","add","scene","object","remove","update","c","steps","length","cpow","pow","tpow","mod","spline","getPointAt","y","cameraHeight","targetHeight","lookAt","getMaterial","Vector2","window","innerWidth","innerHeight","MeshLineMaterial","color","lines","lineWidth","depthTest","material","prev","Vector3","points","Array","fill","map","p","x","z","CatmullRomCurve3","type","geometry","Geometry","vertices","getPoints","line","MeshLine","setGeometry","Mesh","getObjectCircles","index","state","adding","Date","now","removing","enabled","tween","kill","TweenLite","to","duration","delay","ease","Power2","easeInOut","onComplete","getLine1","v","i","addPoints","useMeshLines","meshLine","meshLineGeometries1","push","meshLines1","meshLineMaterial1","LineLoop","material1","points1","group1","getLine2","meshLineGeometries2","meshLines2","meshLineMaterial2","material2","points2","group2","l","g","pn","ratio","degrees","radians","PI","radius","increment","sincos","base","cos","sin","updateLine","audioStrength","noiseStrength","circularStrength","data","analyserData","aia","bands","aib","audioPow","nd","nia","iterator","nib","noisePow","noiseMap","linePow","ln","verticesNeedUpdate","lines1","lines2","rotation","scale","setHex","LineBasicMaterial","Object3D","texture","TextureLoader","load","wrapS","RepeatWrapping","wrapT","repeat","set","MeshBasicMaterial","PlaneGeometry","plane","updateAnalyser","analyser","getByteFrequencyData","loop","stats","begin","render","end","requestAnimationFrame","controls","tube","renderer","addListeners","onWindowResize","width","height","w2","h2","setSize","aspect","updateProjectionMatrix","addEventListener","ImprovedNoise","fade","t","lerp","b","grad","hash","h","u","noise","floorX","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB","Number","prototype","this","audioUrl","notes","randomize","gui","__controllers","__min","value","__max","property","updateDisplay","__color","r","setValue","hex","size","Uint8Array","perlin","quality","j","tweenTo","callback","setStep","previous","current","setTimeout","next","extend","fov","near","far","container","Scene","PerspectiveCamera","WebGLRenderer","alpha","antialias","logarithmicDepthBuffer","setClearColor","shadowMap","getElementById","appendChild","domElement","Stats","dom","source","ctx","actx","AudioContext","webkitAudioContext","createAnalyser","Audio","src","bufferLength","createMediaElementSource","connect","destination","fftSize","frequencyBinCount","play","dat","GUI","closed","circlePosition","addFolder","addColor"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app', ['ngRoute', 'jsonFormatter']);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$httpProvider', function($httpProvider) {\r\n        // $httpProvider.defaults.withCredentials = true;\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$locationProvider', function($locationProvider) {\r\n\r\n        // HTML5 MODE url writing method (false: #/anchor/use, true: /html5/url/use)\r\n        $locationProvider.html5Mode(true);\r\n        $locationProvider.hashPrefix('');\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.run(['$rootScope', function($rootScope) {\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.controller('RootCtrl', ['$scope', function($scope) {\n\n        var OBJECTS = {};\n\n        Number.prototype.mod = function(n) {\n            return ((this % n) + n) % n;\n        };\n\n        var options = {\n            cameraHeight: 33,\n            targetHeight: 39,\n            camera: {\n                position: new THREE.Vector3(),\n                target: new THREE.Vector3(),\n            },\n            circle: {\n                position: new THREE.Vector3(),\n            },\n            audioUrl: \"audio/rossini-192.mp3\",\n            audioVolume: 1.0,\n            colors: {\n                background: 0x111111, // 0xffffff,\n                lines: 0x999999, // 0x888888,\n                notes: 0x444444, // 0xaaaaaa,\n            },\n            bands: 128,\n            points: 128,\n            lines: 32,\n            radius: 200,\n            audioStrength: 100,\n            noiseStrength: 25,\n            circularStrength: 0.90,\n            randomize: function() {\n                for (var i = 0; i < gui.__controllers.length; i++) {\n                    var c = gui.__controllers[i];\n                    if (c.__min) {\n                        var value = c.__min + (c.__max - c.__min) * Math.random();\n                        this[c.property] = value;\n                        c.updateDisplay();\n                    }\n                    if (c.__color) {\n                        c.__color.r = Math.floor(Math.random() * 255);\n                        c.__color.g = Math.floor(Math.random() * 255);\n                        c.__color.b = Math.floor(Math.random() * 255);\n                        c.updateDisplay();\n                        c.setValue(c.__color.hex);\n                    }\n                }\n            }\n        };\n\n        options.noiseMap = getPerlinNoise(options.points, options.lines);\n\n        function getStepper() {\n            var stepper = {\n                pow: 0,\n                duration: 1.500, // sec\n            };\n\n            var steps = new Array(24).fill().map(function(v, i) {\n                return {\n                    camera: {\n                        position: new THREE.Vector3(),\n                        target: new THREE.Vector3(),\n                    },\n                    circle: {\n                        position: new THREE.Vector3(60, 60, 0),\n                        texture: 'img/rossini-01.jpg',\n                    }\n                };\n            });\n\n            var current = 0;\n\n            function tweenTo(pow, callback) {\n                if (stepper.tween) {\n                    stepper.tween.kill();\n                    stepper.tween = null;\n                }\n                stepper.tween = TweenLite.to(stepper, stepper.duration, {\n                    pow: pow,\n                    delay: 0,\n                    ease: Power2.easeInOut,\n                    onComplete: function() {\n                        if (callback) {\n                            callback();\n                        }\n                    },\n                });\n            }\n\n            function setStep(index) {\n                var previous = stepper.current || 0;\n                stepper.current = index;\n                var step = steps[index];\n                options.camera.position.copy(step.camera.position);\n                options.camera.target.copy(step.camera.target);\n                options.circle.position.copy(step.circle.position);\n\n                var circle = OBJECTS.circles[index] || getObjectCircles(index);\n                circle.add();\n                OBJECTS.circles[index] = circle;\n                tweenTo(index / steps.length, function() {\n                    stepper.tween = null;\n                });\n                setTimeout(function() {\n                    if (previous !== stepper.current) {\n                        var circle = OBJECTS.circles[previous];\n                        if (circle) {\n                            circle.remove();\n                        }\n                    }\n                }, stepper.duration * 1000);\n            }\n\n            function next() {\n                current++;\n                current = Math.min(steps.length - 1, current);\n                // current = current % steps.length;\n                setStep(current);\n            }\n\n            function previous() {\n                current--;\n                current = Math.max(0, current);\n                // current = current % steps.length;\n                setStep(current);\n            }\n\n            function getCurrentStep() {\n                return steps[current];\n            }\n\n            return angular.extend(stepper, {\n                steps: steps,\n                current: current,\n                next: next,\n                previous: previous,\n                getCurrentStep: getCurrentStep,\n            });\n        }\n\n        var stepper = getStepper();\n        $scope.stepper = stepper;\n\n        var analyser, analyserData, audio;\n        var stats, gui, scene, camera, fov, ratio, near, far, shadow, back, light, renderer, container, width, height, w2, h2, mouse = { x: 0, y: 0 };\n        var controls = null;\n\n\n        function onChange(params) {\n            // renderer.setClearColor(options.colors.background, 1);\n            if (audio) {\n                audio.volume = options.audioVolume;\n            }\n            var backgroundColor = new THREE.Color(options.colors.background).getHexString();\n            console.log('backgroundColor', backgroundColor);\n            document.body.style.backgroundColor = '#' + backgroundColor;\n            if (OBJECTS.ribbon) {\n                OBJECTS.ribbon.updateMaterial();\n            }\n            angular.forEach(OBJECTS.circles, function(circle) {\n                if (circle) {\n                    circle.updateMaterial();\n                }\n            });\n        }\n\n        function onChangePositions(params) {\n            var step = stepper.getCurrentStep();\n            step.camera.position.copy(options.camera.position);\n            step.camera.target.copy(options.camera.target);\n            step.circle.position.copy(options.circle.position);\n        }\n\n        function createLights() {\n            light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.5);\n            shadow = new THREE.DirectionalLight(0xffffff, 0.8);\n            shadow.position.set(200, 200, 200);\n            shadow.castShadow = true;\n            // shadow.shadowDarkness = .2;\n            back = new THREE.DirectionalLight(0xffffff, 0.4);\n            back.position.set(-100, 200, 50);\n            // back.shadowDarkness = .2;\n            back.castShadow = true;\n            scene.add(light);\n            scene.add(shadow);\n            scene.add(back);\n        }\n\n        function createScene() {\n            width = window.innerWidth;\n            height = window.innerHeight;\n            ratio = width / height;\n            w2 = width / 2;\n            h2 = height / 2;\n            fov = 60;\n            near = 0.001;\n            far = 20000;\n\n            scene = new THREE.Scene();\n            // scene.fog = new THREE.Fog(0x000000, 300, 1000);\n\n            camera = new THREE.PerspectiveCamera(fov, ratio, near, far);\n            camera.position.z = 100;\n            camera.position.y = -500;\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\n            renderer = new THREE.WebGLRenderer({\n                alpha: true,\n                antialias: true,\n                logarithmicDepthBuffer: true\n            });\n            renderer.setClearColor(0x000000, 0); // the default\n            // renderer.setClearColor(options.colors.background, 1);\n            renderer.setSize(width, height);\n            renderer.shadowMap.enabled = true;\n            container = document.getElementById('scene');\n            container.appendChild(renderer.domElement);\n\n            stats = new Stats();\n            container.appendChild(stats.dom);\n\n            addListeners();\n            // controls = new THREE.OrbitControls(camera, renderer.domElement);\n        }\n\n        function getRandomRange(min, max, allowNegatives) {\n            var n = -1 + Math.random() * 2;\n            var a = Math.abs(n);\n            var s = allowNegatives ? Math.floor(n / a) : 1;\n            return s * (min + (max - min) * a);\n        }\n\n        function getObjectRibbon() {\n            var material = getMaterial();\n\n            var prev = new THREE.Vector3();\n            var points = new Array(12).fill(null).map(function() {\n                var p = new THREE.Vector3().copy(prev);\n                prev.x += getRandomRange(500, 1000, true);\n                prev.y += getRandomRange(50, 100, true);\n                prev.z += getRandomRange(1000, 2000, false);\n                return p;\n            });\n\n            var spline = new THREE.CatmullRomCurve3(points);\n            spline.type = 'catmullrom';\n            // spline.closed = true;\n\n            /*\n            var cameraHeight = options.cameraHeight;\n            var cameraSpline = new THREE.CatmullRomCurve3(spline.points.map(function(p) {\n                return new THREE.Vector3(p.x, p.y + cameraHeight, p.z);\n            }));\n            cameraSpline.type = 'catmullrom';\n            // cameraSpline.closed = true;\n\n            var targetHeight = options.targetHeight;\n            var targetSpline = new THREE.CatmullRomCurve3(spline.points.map(function(p) {\n                return new THREE.Vector3(p.x, p.y + targetHeight, p.z);\n            }));\n            targetSpline.type = 'catmullrom';\n            // targetSpline.closed = true;\n            */\n\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(1200);\n\n            var line = new MeshLine();\n            line.setGeometry(geometry);\n            // line.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n            // line.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n            // line.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n\n            var object = new THREE.Mesh(line.geometry, material);\n            // var object = new THREE.Object3D();\n            // object.add(mesh);\n            scene.add(object);\n\n            function add() {\n                console.log('OBJECTS.ribbon.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.ribbon.remove');\n                scene.remove(object);\n            }\n\n            camera.target = camera.target || new THREE.Vector3(0, 0, 0);\n\n            function update() {\n                var c = (1 / stepper.steps.length) / 10;\n                var cpow = stepper.pow;\n                var tpow = (cpow + c).mod(1);\n\n                var position = spline.getPointAt(cpow);\n                position.y += options.cameraHeight;\n\n                var target = spline.getPointAt(tpow);\n                target.y += options.targetHeight;\n\n                var step = stepper.getCurrentStep();\n                position.add(step.camera.position);\n                target.add(step.camera.target);\n\n                camera.position.copy(position);\n                camera.target.copy(target);\n                camera.lookAt(camera.target);\n            }\n\n            function getMaterial() {\n                var resolution = new THREE.Vector2(window.innerWidth, window.innerHeight);\n                return new MeshLineMaterial({\n                    color: new THREE.Color(options.colors.lines),\n                    lineWidth: 5,\n                    depthTest: true,\n                    /*\n                    opacity: 1,\n                    resolution: resolution,\n                    sizeAttenuation: 1,\n                    near: 1,\n                    far: 1000,\n                    blending: THREE.AdditiveBlending,\n                    transparent: false,\n                    side: THREE.DoubleSide,\n                    */\n                });\n            }\n\n            function updateMaterial() {\n                // !!! non va bene\n                OBJECTS.ribbon.material = getMaterial();\n                OBJECTS.ribbon.object.material = OBJECTS.ribbon.material;\n            }\n\n            return {\n                object: object,\n                spline: spline,\n                geometry: geometry,\n                material: material,\n                add: add,\n                remove: remove,\n                update: update,\n                updateMaterial: updateMaterial,\n            };\n        }\n\n        function getObjectCircles(index) {\n            var geometry, object, circles = [];\n\n            // materials\n            var material1 = new THREE.LineBasicMaterial({\n                color: options.colors.lines,\n            });\n\n            var material2 = new THREE.LineBasicMaterial({\n                color: 0xffffff,\n            });\n\n            var resolution = new THREE.Vector2(window.innerWidth, window.innerHeight);\n\n            var meshLineMaterial1 = new MeshLineMaterial({\n                color: new THREE.Color(options.colors.lines),\n                lineWidth: 1,\n                depthTest: true,\n                /*\n                opacity: 1,\n                resolution: resolution,\n                sizeAttenuation: 1,\n                near: 1,\n                far: 1000,\n                blending: THREE.AdditiveBlending,\n                transparent: false,\n                side: THREE.DoubleSide,\n                */\n            });\n\n            var meshLineMaterial2 = new MeshLineMaterial({\n                color: new THREE.Color(0xffffff),\n                lineWidth: 1,\n                depthTest: true,\n                /*\n                opacity: 1,\n                resolution: resolution,\n                sizeAttenuation: 1,\n                near: 1,\n                far: 1000,\n                blending: THREE.AdditiveBlending,\n                transparent: false,\n                side: THREE.DoubleSide,\n                */\n            });\n\n            object = new THREE.Object3D();\n\n            // sphere\n            var step = stepper.steps[index];\n            var texture = new THREE.TextureLoader().load(step.circle.texture);\n            texture.wrapS = THREE.RepeatWrapping;\n            texture.wrapT = THREE.RepeatWrapping;\n            texture.repeat.set(1, 1);\n            var material = new THREE.MeshBasicMaterial({\n                color: options.colors.lines,\n                map: texture,\n            });\n\n            /*\n            geometry = new THREE.IcosahedronGeometry(options.radius - 5, 3); // radius, detail\n            var sphere = new THREE.Mesh(geometry, material);\n            sphere.scale.z = 0.001;\n            object.add(sphere);\n            */\n\n            geometry = new THREE.PlaneGeometry(options.radius * 2 - 20, options.radius * 2 - 20, 8, 8);\n            var plane = new THREE.Mesh(geometry, material);\n            object.add(plane);\n            // sphere\n\n            var points1 = [],\n                points2 = [],\n                meshLines1 = [],\n                meshLines2 = [],\n                meshLineGeometries1 = [],\n                meshLineGeometries2 = [],\n                useMeshLines = false;\n\n            var pn = options.points,\n                ln = options.lines;\n\n            var group1 = new THREE.Object3D();\n            object.add(group1);\n\n            var group2 = new THREE.Object3D();\n            object.add(group2);\n\n            var lines1 = new Array(ln).fill(null).map(getLine1);\n            var lines2 = new Array(ln).fill(null).map(getLine2);\n\n            // console.log('lines2', lines2[lines2.length - 1].geometry.vertices[0]);\n\n            var state = {\n                pow: 0,\n                duration: 0.350,\n                enabled: false,\n                adding: false,\n                removing: false,\n            };\n\n            var to = null;\n\n            function add() {\n                console.log('OBJECTS.circles.add');\n                scene.add(object);\n                state.adding = Date.now();\n                state.removing = false;\n                state.enabled = true;\n                if (state.tween) {\n                    state.tween.kill();\n                }\n                state.tween = TweenLite.to(state, state.duration, {\n                    pow: 1,\n                    delay: 0,\n                    ease: Power2.easeInOut,\n                    onComplete: function() {\n                        state.adding = false;\n                    },\n                });\n            }\n\n            function remove() {\n                console.log('OBJECTS.circles.remove');\n                state.adding = false;\n                state.removing = Date.now();\n                if (state.tween) {\n                    state.tween.kill();\n                }\n                state.tween = TweenLite.to(state, state.duration, {\n                    pow: 0,\n                    delay: 0,\n                    ease: Power2.easeInOut,\n                    onComplete: function() {\n                        state.removing = false;\n                        state.enabled = false;\n                        scene.remove(object);\n                    },\n                });\n            }\n\n            var iterator = 0;\n\n            function getLine1(v, i) {\n                var geometry = new THREE.Geometry();\n                var points = addPoints(geometry, i, 1);\n                var line = null;\n                if (useMeshLines) {\n                    var meshLine = new MeshLine();\n                    meshLine.setGeometry(geometry);\n                    meshLineGeometries1.push(geometry);\n                    meshLines1.push(meshLine);\n                    // meshLine.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n                    // meshLine.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n                    // meshLine.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n                    line = new THREE.Mesh(meshLine.geometry, meshLineMaterial1);\n                } else {\n                    line = new THREE.LineLoop(geometry, material1);\n                }\n                points1.push(points);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // circle.spline = spline;\n                group1.add(line);\n                return line;\n            }\n\n            function getLine2(v, i) {\n                var geometry = new THREE.Geometry();\n                var points = addPoints(geometry, i, 2);\n                var line = null;\n                if (useMeshLines) {\n                    var meshLine = new MeshLine();\n                    meshLine.setGeometry(geometry);\n                    meshLineGeometries2.push(geometry);\n                    meshLines2.push(meshLine);\n                    // meshLine.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n                    // meshLine.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n                    // meshLine.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal                    \n                    line = new THREE.Mesh(meshLine.geometry, meshLineMaterial2);\n                } else {\n                    line = new THREE.LineLoop(geometry, material2);\n                }\n                points2.push(points);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // circle.spline = spline;\n                group2.add(line);\n                return line;\n            }\n\n            function addPoints(geometry, l, g) {\n                var points = new Array(pn).fill(null).map(function(v, i) {\n                    var ratio = i / pn;\n                    var degrees = 360 * ratio; // point degrees;\n                    degrees += 60 * index; // circle offset;\n                    degrees += 30 * g; // group offset;\n                    degrees += (360 / pn * 0.1) * l; // line offset;\n                    var radians = degrees * Math.PI / 180;\n                    var radius = options.radius;\n                    var increment = 0;\n                    if (g === 1) {\n                        increment += (l * l * l * 0.005);\n                    } else {\n                        increment += (l * l * l * 0.005);\n                    }\n                    v = new THREE.Vector3();\n                    v.sincos = {\n                        base: radius,\n                        increment: increment,\n                        radius: radius,\n                        x: Math.cos(radians),\n                        y: Math.sin(radians),\n                    };\n                    geometry.vertices.push(v);\n                    return v;\n                });\n                return points;\n            }\n\n            function updateLine(geometry, vertices, l, g) {\n                var audioStrength = options.audioStrength,\n                    noiseStrength = options.noiseStrength,\n                    circularStrength = options.circularStrength,\n                    data = analyserData;\n\n                angular.forEach(vertices, function(v, i) {\n                    var aia = i % options.bands;\n                    var aib = (pn - 1 - i) % options.bands;\n                    var audioPow = ((data[aia] + data[aib]) / 2) / options.bands;\n                    // var audioPow = data[aia] / options.bands;\n\n                    var nd = g === 1 ? 0 : 64;\n                    var nia = l * pn + ((i + nd + iterator) % pn);\n                    var nib = l * pn + (((pn - 1 - i - nd) + iterator) % pn);\n                    var noisePow = (options.noiseMap[nia] + options.noiseMap[nib]) / 2 / 64;\n\n                    var linePow = 1 - ((ln - l) / ln * circularStrength);\n\n                    var radius = v.sincos.base +\n                        (v.sincos.increment * noisePow) +\n                        (v.sincos.increment * audioPow) +\n                        (noiseStrength * noisePow) * linePow +\n                        (audioStrength * audioPow) * linePow +\n                        // (audioStrength * (3 - g) * audioPow * (l * 0.1)) * linePow +\n                        0;\n\n                    v.sincos.radius = radius;\n                    // v.sincos.radius += (radius - v.sincos.radius) / 2;\n\n                    v.x = v.sincos.x * v.sincos.radius;\n                    v.y = v.sincos.y * v.sincos.radius;\n                    v.z = 0; // -l;\n                    // console.log(v.sincos.radius);\n                });\n\n                /*\n                var f = 0;\n                var l = pn - 1;\n                var first = new THREE.Vector3().copy(vertices[f]);\n                var last = new THREE.Vector3().copy(vertices[l]);\n                vertices[f].add(new THREE.Vector3().subVectors(first, last).multiplyScalar(0.5));\n                vertices[l].add(new THREE.Vector3().subVectors(first, last).multiplyScalar(-0.5));\n                */\n\n                geometry.verticesNeedUpdate = true;\n\n                /*\n                \tlines.forEach( function( l, i ) {\n\t\tif( params.animateWidth ) l.material.uniforms.lineWidth.value = params.lineWidth * ( 1 + .5 * Math.sin( 5 * t + i ) );\n\t\tif( params.autoRotate ) l.rotation.y += .125 * delta;\n      l.material.uniforms.visibility.value= params.animateVisibility ? (time/3000) % 1.0 : 1.0;\n                */\n                /*\n                if (iterator === 60 && g === 2 && l === 0) {\n                    console.log('vertices', geometry.vertices.map(function(v) { return v.x + ',' + v.y; }));\n                }\n                */\n            }\n\n            function update() {\n                angular.forEach(lines1, function(line, l) {\n                    updateLine(line.geometry, points1[l], l, 1);\n                    if (useMeshLines) {\n                        meshLines1[l].setGeometry(meshLineGeometries1[l]);\n                    }\n                });\n\n                angular.forEach(lines2, function(line, l) {\n                    updateLine(line.geometry, points2[l], l, 2);\n                    if (useMeshLines) {\n                        meshLines2[l].setGeometry(meshLineGeometries2[l]);\n                    }\n                });\n\n                group1.rotation.z += 0.001;\n                group2.rotation.z -= 0.001;\n\n                var step = stepper.getCurrentStep();\n                var position = OBJECTS.ribbon.spline.getPointAt((index + 0.5) / stepper.steps.length);\n                // position.y += options.cameraHeight;\n\n                position.add(step.circle.position);\n\n                object.position.copy(position);\n                /*\n                object.position.x += (position.x + Math.random() * 20 - object.position.x) / 20;\n                object.position.y += (position.y + Math.random() * 20 - object.position.y) / 20;\n                object.position.z += (position.z + Math.random() * 20 - object.position.z) / 20;\n                */\n\n                object.scale.x = object.scale.y = object.scale.z = 0.001 + 0.3 * state.pow;\n                object.lookAt(camera.position);\n\n                // iterator++;\n            }\n\n            function updateMaterial() {\n                material.color.setHex(options.colors.lines);\n                material1.color.setHex(options.colors.lines);\n            }\n\n            console.log(object);\n\n            return {\n                add: add,\n                remove: remove,\n                object: object,\n                state: state,\n                update: update,\n                updateMaterial: updateMaterial,\n            };\n        }\n        /*\n                function getObjectCirclesBak(index) {\n                    var geometry, material, object, circles = [];\n\n                    object = new THREE.Object3D();\n\n                    geometry = new THREE.IcosahedronGeometry(90, 3); // radius, detail\n                    material = new THREE.MeshBasicMaterial({\n                        color: 0xffff00,\n                    });\n                    var sphere = new THREE.Mesh(geometry, material);\n                    object.add(sphere);\n\n                    material = new THREE.LineBasicMaterial({\n                        color: options.colors.lines\n                    });\n\n                    var pn = options.points;\n\n                    while (circles.length < pn) {\n                        geometry = new THREE.Geometry();\n                        var circle = new THREE.LineLoop(geometry, material);\n                        circle.points = new Array(pn).fill(null);\n                        // var spline = new THREE.CatmullRomCurve3(points);\n                        // circle.spline = spline;\n                        circles.push(circle);\n                        object.add(circle);\n                    }\n                    var points = new Array(pn * pn).fill(null).map(function(n, i) {\n                        var r = Math.floor(i / pn);\n                        var c = i - r * pn;\n                        var angle = 2 * Math.PI / pn;\n                        var rad = angle * r + angle * c * 0.1;\n                        var point = new THREE.Vector3();\n                        point.r = {\n                            x: Math.cos(rad),\n                            y: Math.sin(rad),\n                            z: 96 + (c * c * c * 0.0001),\n                        };\n                        circles[c].points[r] = point;\n                        circles[c].geometry.vertices.push(point);\n                        return point;\n                    });\n\n                    var state = {\n                        pow: 0,\n                        duration: 0.350,\n                        enabled: false,\n                        adding: false,\n                        removing: false,\n                    };\n\n                    var to = null;\n\n                    function add() {\n                        console.log('OBJECTS.circles.add');\n                        scene.add(object);\n                        state.adding = Date.now();\n                        state.removing = false;\n                        state.enabled = true;\n                        if (state.tween) {\n                            state.tween.kill();\n                        }\n                        state.tween = TweenLite.to(state, state.duration, {\n                            pow: 1,\n                            delay: 0,\n                            ease: Power2.easeInOut,\n                            onComplete: function() {\n                                state.adding = false;\n                            },\n                        });\n                    }\n\n                    function remove() {\n                        console.log('OBJECTS.circles.remove');\n                        state.adding = false;\n                        state.removing = Date.now();\n                        if (state.tween) {\n                            state.tween.kill();\n                        }\n                        state.tween = TweenLite.to(state, state.duration, {\n                            pow: 0,\n                            delay: 0,\n                            ease: Power2.easeInOut,\n                            onComplete: function() {\n                                state.removing = false;\n                                state.enabled = false;\n                                scene.remove(object);\n                            },\n                        });\n                    }\n\n                    var d = 0;\n\n                    function update() {\n                        var audioStrength = options.audioStrength,\n                            noiseStrength = options.noiseStrength,\n                            circularStrength = options.circularStrength;\n                        angular.forEach(points, function(v, i) {\n                            var r = Math.floor(i / pn);\n                            var c = i - r * pn;\n                            var b = Math.abs(c - pn / 2) * 2;\n                            var dr = 1 - (Math.abs(r - pn / 2) / (pn / 2));\n                            var dc = 1 - (Math.abs(c - pn / 2) / (pn / 2));\n                            var drc = (dr + dc) / 2;\n                            var ai = r % options.bands;\n                            var pow = (analyserData[ai] + analyserData[pn - 1 - ai]) / 2;\n                            var scale = pow / options.bands;\n                            var na = c * pn + ((r + d) % pn);\n                            var noise = options.noiseMap[na];\n                            var cpow = 1 - ((pn - c) / pn * circularStrength);\n                            var level = v.r.z + (noise / 64 * noiseStrength) * cpow + (audioStrength * 2 * scale * scale) * cpow;\n                            var radius = v.radius || level;\n                            radius += (level - radius) / 2;\n                            v.x = v.r.x * radius;\n                            v.y = v.r.y * radius;\n                            v.z = 0; // -c;\n                            v.radius = radius;\n                        });\n                        angular.forEach(circles, function(circle, l) {\n                            // var points = circle.points;\n                            // var spline = circle.spline;\n                            // spline.getPoints(pn * 2);\n                            // circle.geometry.vertices = points;\n                            // geometry.computeLineDistances();\n                            // geometry.lineDistancesNeedUpdate = true;\n                            circle.geometry.verticesNeedUpdate = true;\n                        });\n                        object.scale.x = object.scale.y = object.scale.z = 0.001 + 0.3 * state.pow;\n                        object.lookAt(camera.position);\n                        // d++;\n                    }\n\n                    var position = OBJECTS.ribbon.cameraSpline.getPointAt((index + 0.5) / stepper.steps.length);\n\n                    object.position.copy(position);\n\n                    return {\n                        add: add,\n                        remove: remove,\n                        update: update,\n                        object: object,\n                        material: material,\n                        state: state,\n                    };\n                }\n        */\n        function createObjects() {\n            // OBJECTS.tube = getObjectTube();\n            OBJECTS.ribbon = getObjectRibbon();\n            OBJECTS.circles = new Array(stepper.steps).fill(null);\n        }\n\n        function createAnalyser() {\n            var source, ctx, actx = (window.AudioContext || window.webkitAudioContext);\n            source = null;\n            ctx = new actx();\n            analyser = ctx.createAnalyser();\n            audio = new Audio();\n            audio.src = options.audioUrl;\n            audio.controls = true;\n            audio.addEventListener('canplay', function() {\n                var bufferLength;\n                console.log('audio canplay');\n                source = ctx.createMediaElementSource(audio);\n                source.connect(analyser);\n                source.connect(ctx.destination);\n                analyser.fftSize = options.bands * 2;\n                bufferLength = analyser.frequencyBinCount;\n                console.log('bufferLength', bufferLength);\n                analyserData = new Uint8Array(bufferLength);\n                return analyserData;\n            });\n            audio.volume = options.audioVolume;\n            return audio.play();\n        }\n\n        function updateAnalyser() {\n            if (analyserData) {\n                analyser.getByteFrequencyData(analyserData);\n                angular.forEach(OBJECTS.circles, function(circle) {\n                    if (circle && circle.state.enabled) {\n                        circle.update();\n                    }\n                });\n            }\n        }\n\n        function loop() {\n            stats.begin();\n            render();\n            stats.end();\n            requestAnimationFrame(loop);\n        }\n\n        function render() {\n            if (controls) {\n                controls.update();\n            }\n            if (OBJECTS.tube) {\n                OBJECTS.tube.update();\n            }\n            if (OBJECTS.ribbon) {\n                OBJECTS.ribbon.update();\n            }\n            updateAnalyser();\n            renderer.render(scene, camera);\n        }\n\n        createScene();\n        // createLights();\n        createObjects();\n        createAnalyser();\n        addGui();\n        onChange();\n        loop();\n\n        function addGui() {\n            gui = new dat.GUI();\n            gui.closed = true;\n            gui.add(options, 'cameraHeight', 20.0, 100.0).onChange(onChange);\n            gui.add(options, 'targetHeight', 20.0, 100.0).onChange(onChange);\n            /*\n            var cameraPosition = gui.addFolder('CameraPosition');\n            cameraPosition.add(options.camera.position, 'x', -300, 300).onChange(onChangePositions);\n            cameraPosition.add(options.camera.position, 'y', -300, 300).onChange(onChangePositions);\n            cameraPosition.add(options.camera.position, 'z', -300, 300).onChange(onChangePositions);\n            var cameraTarget = gui.addFolder('cameraTarget');\n            cameraTarget.add(options.camera.target, 'x', -300, 300).onChange(onChangePositions);\n            cameraTarget.add(options.camera.target, 'y', -300, 300).onChange(onChangePositions);\n            cameraTarget.add(options.camera.target, 'z', -300, 300).onChange(onChangePositions);\n            */\n            var circlePosition = gui.addFolder('circlePosition');\n            circlePosition.add(options.circle.position, 'x', -300, 300).onChange(onChangePositions);\n            circlePosition.add(options.circle.position, 'y', -300, 300).onChange(onChangePositions);\n            circlePosition.add(options.circle.position, 'z', -300, 300).onChange(onChangePositions);\n            gui.addColor(options.colors, 'background').onChange(onChange);\n            gui.addColor(options.colors, 'lines').onChange(onChange);\n            gui.add(options, 'audioVolume', 0.01, 1.0).onChange(onChange);\n            gui.add(options, 'audioStrength', 10, 100).onChange(onChange);\n            gui.add(options, 'noiseStrength', 10, 100).onChange(onChange);\n            gui.add(options, 'circularStrength', 0.01, 0.90).onChange(onChange);\n            gui.add(options, 'randomize');\n            return gui;\n        }\n\n        function addListeners() {\n            function handleMouseMove(event) {\n                mouse = { x: event.clientX, y: event.clientY };\n            }\n\n            function handleMouseDown(event) {\n                //\n            }\n\n            function handleMouseUp(event) {\n                //\n            }\n\n            function handleTouchStart(event) {\n                if (event.touches.length > 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function handleTouchEnd(event) {\n                mousePos = { x: windowHalfX, y: windowHalfY };\n            }\n\n            function handleTouchMove(event) {\n                if (event.touches.length == 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function onWindowResize() {\n                width = window.innerWidth;\n                height = window.innerHeight;\n                w2 = width / 2;\n                h2 = height / 2;\n                renderer.setSize(width, height);\n                camera.aspect = width / height;\n                camera.updateProjectionMatrix();\n            }\n            window.addEventListener('resize', onWindowResize, false);\n            /*\n            document.addEventListener('mousemove', handleMouseMove, false);\n            document.addEventListener('mousedown', handleMouseDown, false);\n            document.addEventListener('mouseup', handleMouseUp, false);\n            document.addEventListener('touchstart', handleTouchStart, false);\n            document.addEventListener('touchend', handleTouchEnd, false);\n            document.addEventListener('touchmove', handleTouchMove, false);\n            */\n        }\n\n        function getSprite() {\n            var canvas = document.createElement('canvas');\n            canvas.width = 128;\n            canvas.height = 128;\n            var ctx = canvas.getContext('2d');\n            var gradient = ctx.createRadialGradient(\n                canvas.width / 2,\n                canvas.height / 2,\n                0,\n                canvas.width / 2,\n                canvas.height / 2,\n                canvas.width / 2\n            );\n            /*\n            gradient.addColorStop(0, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.2, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.22, 'rgba(0,0,0,.2)');\n            gradient.addColorStop(1, 'rgba(0,0,0,0)');\n            ctx.fillStyle = gradient;\n            */\n            ctx.fillStyle = \"#000000\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            return canvas;\n        }\n\n        function getPerlinNoise(width, height) {\n            var size = width * height,\n                data = new Uint8Array(size),\n                perlin = new ImprovedNoise(),\n                quality = 1,\n                z = Math.random() * 100;\n            for (var j = 0; j < 4; j++) {\n                for (var i = 0; i < size; i++) {\n                    var x = i % width,\n                        y = ~~(i / width);\n                    data[i] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75);\n                }\n                quality *= 5;\n            }\n            return data;\n        }\n\n        function ImprovedNoise() {\n            var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\n                23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\n                174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n                133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\n                89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\n                202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\n                248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\n                178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n                14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n                93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (var i = 0; i < 256; i++) {\n                p[256 + i] = p[i];\n            }\n\n            function fade(t) {\n                return t * t * t * (t * (t * 6 - 15) + 10);\n            }\n\n            function lerp(t, a, b) {\n                return a + t * (b - a);\n            }\n\n            function grad(hash, x, y, z) {\n                var h = hash & 15;\n                var u = h < 8 ? x : y,\n                    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n                return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n            }\n\n            return {\n                noise: function(x, y, z) {\n                    var floorX = Math.floor(x),\n                        floorY = Math.floor(y),\n                        floorZ = Math.floor(z);\n                    var X = floorX & 255,\n                        Y = floorY & 255,\n                        Z = floorZ & 255;\n                    x -= floorX;\n                    y -= floorY;\n                    z -= floorZ;\n                    var xMinus1 = x - 1,\n                        yMinus1 = y - 1,\n                        zMinus1 = z - 1;\n                    var u = fade(x),\n                        v = fade(y),\n                        w = fade(z);\n                    var A = p[X] + Y,\n                        AA = p[A] + Z,\n                        AB = p[A + 1] + Z,\n                        B = p[X + 1] + Y,\n                        BA = p[B] + Z,\n                        BB = p[B + 1] + Z;\n                    return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n                                grad(p[BA], xMinus1, y, z)),\n                            lerp(u, grad(p[AB], x, yMinus1, z),\n                                grad(p[BB], xMinus1, yMinus1, z))),\n                        lerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n                                grad(p[BA + 1], xMinus1, y, z - 1)),\n                            lerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n                                grad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n                }\n            };\n        }\n\n        function getObjectTube() {\n            var options = {\n                path: spline,\n                tubularSegments: 500,\n                radius: 1,\n                radiusSegments: 2,\n                closed: true,\n            }\n            var spline = new THREE.CatmullRomCurve3([\n                new THREE.Vector3(-400, -400, 0),\n                new THREE.Vector3(400, -400, 0),\n                new THREE.Vector3(1400, -400, 0),\n                new THREE.Vector3(400, 400, 0),\n                new THREE.Vector3(-400, 400, 0)\n            ]);\n            spline.type = 'catmullrom';\n            spline.closed = true;\n\n            var object = new THREE.Object3D();\n            scene.add(object);\n\n            var material = new THREE.MeshLambertMaterial({\n                color: 0xffffff\n            });\n            var geometry = new THREE.TubeBufferGeometry(spline, options.tubularSegments, options.radius, options.radiusSegments, options.closed);\n            var group = new THREE.Mesh(geometry, material);\n            object.add(group);\n\n            // if (group !== undefined) {\n            //     object.remove(group);\n            //     group.children[0].geometry.dispose();\n            //     group.children[1].geometry.dispose();\n            // }            \n\n            /*\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(500);\n            var line = new MeshLine();\n            line.setGeometry(geometry);\n            // line.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n            // line.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n            // line.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n            var material = new MeshLineMaterial({\n                color: new THREE.Color(0xffffff),\n                lineWidth: 4,\n            });\n            var mesh = new THREE.Mesh(line.geometry, material);\n            object.add(mesh);\n            */\n\n            function add() {\n                console.log('OBJECTS.tube.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.tube.remove');\n                scene.remove(object);\n            }\n\n            var d = 0; // iterator\n            var a = new THREE.Vector3(); // normal\n            var b = new THREE.Vector3(); // binormal\n\n            function update() {\n                var duration = 20 * 1000;\n                var scale = 1;\n                var offset = 15;\n                var lookAhead = true;\n                var msec = Date.now();\n                var pow = (msec % duration) / duration;\n                var dir = spline.getTangentAt(pow);\n                var tangents = geometry.tangents;\n                var binormals = geometry.binormals;\n                var x = pow * tangents.length;\n                var c = Math.floor(x);\n                var n = (c + 1) % tangents.length;\n                b.subVectors(binormals[n], binormals[c]);\n                b.multiplyScalar(x - c).add(binormals[c]);\n                a.copy(b).cross(dir);\n                var p = spline.getPointAt(pow);\n                p.multiplyScalar(scale);\n                p.add(a.clone().multiplyScalar(offset));\n                camera.position.copy(p);\n                var lookAt;\n                if (lookAhead) {\n                    // using arclength for stablization in look ahead\n                    lookAt = spline.getPointAt((pow + 30 / spline.getLength()) % 1).multiplyScalar(scale);\n                } else {\n                    // camera orientation 2 - up orientation via normal\n                    lookAt = new THREE.Vector3().copy(p).add(dir);\n                }\n                camera.matrix.lookAt(camera.position, lookAt, a);\n                camera.rotation.setFromRotationMatrix(camera.matrix, camera.rotation.order);\n                d++;\n            }\n\n            return {\n                object: object,\n                spline: spline,\n                geometry: geometry,\n                add: add,\n                remove: remove,\n                update: update,\n            };\n        }\n\n    }]);\n\n}());"]}