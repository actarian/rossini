{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","config","$httpProvider","$locationProvider","html5Mode","hashPrefix","run","$rootScope","controller","$scope","onChange","params","audio","volume","options","audioVolume","backgroundColor","THREE","Color","colors","background","getHexString","console","log","document","body","style","OBJECTS","ribbon","setMaterial","forEach","circles","circle","material","color","setHex","lines","display","add","remove","dots","animateVertexAtIndex","v","i","d","rows","audioStrength","noiseStrength","r","Math","floor","c","b","abs","dr","dc","drc","index","bands","pow","analyserData","scale","ni","level","noiseMap","z","max","getRandomRange","min","allowNegatives","n","random","a","getObjectRibbon","scene","object","update","stepper","steps","length","cpow","tpow","mod","position","cameraSpline","getPointAt","target","targetSpline","camera","copy","lookAt","getMaterial","resolution","Vector2","window","innerWidth","innerHeight","MeshLineMaterial","lineWidth","opacity","sizeAttenuation","near","far","depthTest","blending","AdditiveBlending","transparent","side","DoubleSide","prev","Vector3","points","Array","fill","map","p","x","y","spline","CatmullRomCurve3","type","geometry","Geometry","vertices","getPoints","line","MeshLine","setGeometry","Mesh","getObjectCircles","state","adding","Date","now","removing","enabled","tween","kill","TweenLite","to","duration","delay","ease","Power2","easeInOut","onComplete","circularStrength","ai","na","noise","radius","l","verticesNeedUpdate","Object3D","IcosahedronGeometry","MeshBasicMaterial","sphere","LineBasicMaterial","space","LineLoop","push","angle","PI","rad","point","cos","sin","getObjectDots","PointsMaterial","size","Points","t","vertex","getObjectLines","Line","updateAnalyser","analyser","getByteFrequencyData","loop","stats","begin","render","end","requestAnimationFrame","controls","tube","renderer","addListeners","onWindowResize","width","height","w2","h2","setSize","aspect","updateProjectionMatrix","addEventListener","ImprovedNoise","fade","lerp","grad","hash","h","u","floorX","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB","Number","prototype","this","tweenTo","callback","setStep","previous","current","setTimeout","next","extend","gui","fov","ratio","container","audioUrl","notes","randomize","__controllers","__min","value","__max","property","updateDisplay","__color","g","setValue","hex","data","Uint8Array","perlin","quality","j","Scene","PerspectiveCamera","WebGLRenderer","alpha","antialias","logarithmicDepthBuffer","setClearColor","shadowMap","getElementById","appendChild","domElement","Stats","dom","source","ctx","actx","AudioContext","webkitAudioContext","createAnalyser","Audio","src","bufferLength","createMediaElementSource","connect","destination","fftSize","frequencyBinCount","play","dat","GUI","closed","Circles","Lines","Dots","addColor"],"mappings":"CAEC,WACG,YAEUA,SAAQC,OAAO,OAAQ,UAAW,qBAK/C,WACG,YAEUD,SAAQC,OAAO,OAErBC,QAAQ,gBAAiB,SAASC,UAOzC,WACG,YAEUH,SAAQC,OAAO,OAErBC,QAAQ,oBAAqB,SAASE,GAGtCA,EAAkBC,WAAU,GAC5BD,EAAkBE,WAAW,UAOpC,WACG,YAEUN,SAAQC,OAAO,OAErBM,KAAK,aAAc,SAASC,UAOnC,WACG,YAEUR,SAAQC,OAAO,OAErBQ,WAAW,YAAa,SAAU,SAASC,GA6H3C,QAASC,GAASC,GAEVC,IACAA,EAAMC,OAASC,EAAQC,YAE3B,IAAIC,GAAkB,GAAIC,OAAMC,MAAMJ,EAAQK,OAAOC,YAAYC,cACjEC,SAAQC,IAAI,kBAAmBP,GAC/BQ,SAASC,KAAKC,MAAMV,gBAAkB,IAAMA,EACxCW,EAAQC,QACRD,EAAQC,OAAOC,cAEnB9B,QAAQ+B,QAAQH,EAAQI,QAAS,SAASC,GAClCA,GACAA,EAAOC,SAASC,MAAMC,OAAOrB,EAAQK,OAAOiB,SAahDT,EAAQS,QACRT,EAAQS,MAAMH,SAASC,MAAMC,OAAOrB,EAAQK,OAAOiB,OAC3B,MAApBtB,EAAQuB,QACRV,EAAQS,MAAME,MAEdX,EAAQS,MAAMG,UAGlBZ,EAAQa,OACRb,EAAQa,KAAKP,SAASC,MAAMC,OAAOrB,EAAQK,OAAOiB,OAC1B,MAApBtB,EAAQuB,QACRV,EAAQa,KAAKF,MAEbX,EAAQa,KAAKD,UAwDzB,QAASE,GAAqBC,EAAGC,EAAGC,GAChC,GAAIC,GAAO/B,EAAQ+B,KACfC,EAAgBhC,EAAQgC,cACxBC,EAAgBjC,EAAQiC,cACxBC,EAAIC,KAAKC,MAAMP,EAAIE,GACnBM,EAAIR,EAAIK,EAAIH,EACZO,EAA6B,EAAzBH,KAAKI,IAAIF,EAAIN,EAAO,GACxBS,EAAK,EAAKL,KAAKI,IAAIL,EAAIH,EAAO,IAAMA,EAAO,GAC3CU,EAAK,EAAKN,KAAKI,IAAIF,EAAIN,EAAO,IAAMA,EAAO,GAC3CW,GAAOF,EAAKC,GAAM,EAClBE,EAAQL,EAAItC,EAAQ4C,MACpBC,EAAMC,EAAaH,GACnBI,EAASF,EAAM7C,EAAQ4C,MAASJ,EAAK,EACrCQ,EAAKd,EAAIH,GAASM,EAAIP,GAAKC,EAC3BkB,EAASjD,EAAQkD,SAASF,GAAM,GAAKf,EAAiBS,EAAOV,EAAgBe,CACjFnB,GAAEuB,IAAMF,EAAQrB,EAAEuB,IAAM,EAAI,EAAIhB,KAAKiB,IAAI,KAAU,EAAIV,IA8G3D,QAASW,GAAeC,EAAKF,EAAKG,GAC9B,GAAIC,GAAyB,EAAhBrB,KAAKsB,SAAT,EACLC,EAAIvB,KAAKI,IAAIiB,EAEjB,QADQD,EAAiBpB,KAAKC,MAAMoB,EAAIE,GAAK,IACjCJ,GAAOF,EAAME,GAAOI,GAGpC,QAASC,KAsDL,QAASnC,KACLhB,QAAQC,IAAI,sBACZmD,EAAMpC,IAAIqC,GAGd,QAASpC,KACLjB,QAAQC,IAAI,yBACZmD,EAAMnC,OAAOoC,GAKjB,QAASC,KACL,GAAIzB,GAAK,EAAI0B,EAAQC,MAAMC,OAAU,GACjCC,EAAOH,EAAQlB,IACfsB,GAAQD,EAAO7B,GAAG+B,IAAI,GAEtBC,EAAWC,EAAaC,WAAWL,GACnCM,EAASC,EAAaF,WAAWJ,EAErCO,GAAOL,SAASM,KAAKN,GACrBK,EAAOF,OAAOG,KAAKH,GACnBE,EAAOE,OAAOF,EAAOF,QAGzB,QAASK,KACL,GAAIC,GAAa,GAAI3E,OAAM4E,QAAQC,OAAOC,WAAYD,OAAOE,YAC7D,OAAO,IAAIC,mBACP/D,MAAO,GAAIjB,OAAMC,MAAMJ,EAAQK,OAAOiB,OACtC8D,UAAW,EACXC,QAAS,EACTP,WAAYA,EACZQ,gBAAiB,EACjBC,KAAM,EACNC,IAAK,IACLC,WAAW,EACXC,SAAUvF,MAAMwF,iBAChBC,aAAa,EACbC,KAAM1F,MAAM2F,aAIpB,QAAS/E,KAELF,EAAQC,OAAOK,SAAW0D,IAC1BhE,EAAQC,OAAO+C,OAAO1C,SAAWN,EAAQC,OAAOK,SAlGpD,GAAIA,GAAW0D,IAYXkB,EAAO,GAAI5F,OAAM6F,QACjBC,EAAS,GAAIC,OAAM,IAAIC,KAAK,MAAMC,IAAI,WACtC,GAAIC,IAAI,GAAIlG,OAAM6F,SAAUrB,KAAKoB,EAIjC,OAHAA,GAAKO,GAAKjD,EAAe,IAAK,KAAM,GACpC0C,EAAKQ,GAAKlD,EAAe,GAAI,KAAK,GAClC0C,EAAK5C,GAAKE,EAAe,IAAM,KAAM,GAC9BgD,IAGPG,EAAS,GAAIrG,OAAMsG,iBAAiBR,EACxCO,GAAOE,KAAO,YAGd,IACIpC,GAAe,GAAInE,OAAMsG,iBAAiBD,EAAOP,OAAOG,IAAI,SAASC,GACrE,MAAO,IAAIlG,OAAM6F,QAAQK,EAAEC,EAAGD,EAAEE,EAFjB,GAEmCF,EAAElD,KAExDmB,GAAaoC,KAAO,YAGpB,IACIjC,GAAe,GAAItE,OAAMsG,iBAAiBD,EAAOP,OAAOG,IAAI,SAASC,GACrE,MAAO,IAAIlG,OAAM6F,QAAQK,EAAEC,EAAGD,EAAEE,EAFjB,GAEmCF,EAAElD,KAExDsB,GAAaiC,KAAO,YAGpB,IAAIC,GAAW,GAAIxG,OAAMyG,QACzBD,GAASE,SAAWL,EAAOM,UAAU,KAErC,IAAIC,GAAO,GAAIC,SACfD,GAAKE,YAAYN,EAKjB,IAAI9C,GAAS,GAAI1D,OAAM+G,KAAKH,EAAKJ,SAAUxF,EAqD3C,OAlDAyC,GAAMpC,IAAIqC,GAYVa,EAAOF,OAASE,EAAOF,QAAU,GAAIrE,OAAM6F,QAAQ,EAAG,EAAG,IAuCrDnC,OAAQA,EACR2C,OAAQA,EACRlC,aAAcA,EACdG,aAAcA,EACdkC,SAAUA,EACVxF,SAAUA,EACVK,IAAKA,EACLC,OAAQA,EACRqC,OAAQA,EACR/C,YAAaA,GAIrB,QAASoG,GAAiBxE,GAqDtB,QAASnB,KACLhB,QAAQC,IAAI,uBACZmD,EAAMpC,IAAIqC,GACVuD,EAAMC,OAASC,KAAKC,MACpBH,EAAMI,UAAW,EACjBJ,EAAMK,SAAU,EACZL,EAAMM,OACNN,EAAMM,MAAMC,OAEhBP,EAAMM,MAAQE,UAAUC,GAAGT,EAAOA,EAAMU,UACpCjF,IAAK,EACLkF,MAAO,EACPC,KAAMC,OAAOC,UACbC,WAAY,WACRf,EAAMC,QAAS,KAK3B,QAAS5F,KACLjB,QAAQC,IAAI,0BACZ2G,EAAMC,QAAS,EACfD,EAAMI,SAAWF,KAAKC,MAClBH,EAAMM,OACNN,EAAMM,MAAMC,OAEhBP,EAAMM,MAAQE,UAAUC,GAAGT,EAAOA,EAAMU,UACpCjF,IAAK,EACLkF,MAAO,EACPC,KAAMC,OAAOC,UACbC,WAAY,WACRf,EAAMI,UAAW,EACjBJ,EAAMK,SAAU,EAChB7D,EAAMnC,OAAOoC,MAOzB,QAASC,KACL,GAAI/B,GAAO/B,EAAQ+B,KACfC,EAAgBhC,EAAQgC,cACxBC,EAAgBjC,EAAQiC,cACxBmG,EAAmBpI,EAAQoI,gBAC/BnJ,SAAQ+B,QAAQiF,EAAQ,SAASrE,EAAGC,GAEhC,GAAIK,GAAIC,KAAKC,MAAMP,EAAIE,GACnBM,EAAIR,EAAIK,EAAIH,EAKZsG,GAJIlG,KAAKI,IAAIF,EAAIN,EAAO,GACdI,KAAKI,IAAIL,EAAIH,EAAO,GACpBI,KAAKI,IAAIF,EAAIN,EAAO,GAEzBG,EAAIlC,EAAQ4C,OACjBC,GAAOC,EAAauF,GAAMvF,EAAaf,EAAO,EAAIsG,IAAO,EACzDtF,EAAQF,EAAM7C,EAAQ4C,MACtB0F,EAAKjG,EAAIN,GAASG,EAAIJ,GAAKC,EAC3BwG,EAAQvI,EAAQkD,SAASoF,GACzBpE,EAAO,GAAMnC,EAAOM,GAAKN,EAAOqG,EAChCnF,EAAQrB,EAAEM,EAAEiB,EAAKoF,EAAQ,GAAKtG,EAAiBiC,EAAwB,EAAhBlC,EAAoBe,EAAQA,EAASmB,EAC5FsE,EAAS5G,EAAE4G,QAAUvF,CACzBuF,KAAWvF,EAAQuF,GAAU,EAC7B5G,EAAE0E,EAAI1E,EAAEM,EAAEoE,EAAIkC,EACd5G,EAAE2E,EAAI3E,EAAEM,EAAEqE,EAAIiC,EACd5G,EAAEuB,EAAI,EACNvB,EAAE4G,OAASA,IAEfvJ,QAAQ+B,QAAQC,EAAS,SAASC,EAAQuH,GAOtCvH,EAAOyF,SAAS+B,oBAAqB,IAEzC7E,EAAOd,MAAMuD,EAAIzC,EAAOd,MAAMwD,EAAI1C,EAAOd,MAAMI,EAAI,KAAQ,GAAMiE,EAAMvE,IACvEgB,EAAOe,OAAOF,EAAOL,UAjIzB,GAAIsC,GAAUxF,EAAU0C,EAAQ5C,IAEhC4C,GAAS,GAAI1D,OAAMwI,SAEnBhC,EAAW,GAAIxG,OAAMyI,oBAAoB,GAAI,GAC7CzH,EAAW,GAAIhB,OAAM0I,mBACjBzH,MAAO,UAEX,IAAI0H,GAAS,GAAI3I,OAAM+G,KAAKP,EAAUxF,EACtC0C,GAAOrC,IAAIsH,GAEX3H,EAAW,GAAIhB,OAAM4I,mBACjB3H,MAAOpB,EAAQK,OAAOiB,OAG1B,IAAIS,GAAO/B,EAAQ+B,IAEnB,KADY/B,EAAQgJ,MACb/H,EAAQgD,OAASjE,EAAQ+B,MAAM,CAClC4E,EAAW,GAAIxG,OAAMyG,QACrB,IAAI1F,GAAS,GAAIf,OAAM8I,SAAStC,EAAUxF,EAC1CD,GAAO+E,OAAS,GAAIC,OAAMnE,GAAMoE,KAAK,MAGrClF,EAAQiI,KAAKhI,GACb2C,EAAOrC,IAAIN,GAEf,GAAI+E,GAAS,GAAIC,OAAMnE,EAAOA,GAAMoE,KAAK,MAAMC,IAAI,SAAS5C,EAAG3B,GAC3D,GAAIK,GAAIC,KAAKC,MAAMP,EAAIE,GACnBM,EAAIR,EAAIK,EAAIH,EACZoH,EAAQ,EAAIhH,KAAKiH,GAAKrH,EACtBsH,EAAMF,EAAQjH,EAAIiH,EAAQ9G,EAAI,GAC9BiH,EAAQ,GAAInJ,OAAM6F,OAQtB,OAPAsD,GAAMpH,GACFoE,EAAGnE,KAAKoH,IAAIF,GACZ9C,EAAGpE,KAAKqH,IAAIH,GACZlG,EAAG,GAAMd,EAAIA,EAAIA,EAAI,MAEzBpB,EAAQoB,GAAG4D,OAAO/D,GAAKoH,EACvBrI,EAAQoB,GAAGsE,SAASE,SAASqC,KAAKI,GAC3BA,IAGPlC,GACAvE,IAAK,EACLiF,SAAU,IACVL,SAAS,EACTJ,QAAQ,EACRG,UAAU,GA2CV1F,EAAI,EA2CJuC,EAAWxD,EAAQC,OAAOwD,aAAaC,YAAY5B,EAAQ,IAAOoB,EAAQC,MAAMC,OAIpF,OAFAJ,GAAOQ,SAASM,KAAKN,IAGjB7C,IAAKA,EACLC,OAAQA,EACRqC,OAAQA,EACRD,OAAQA,EACR1C,SAAUA,EACViG,MAAOA,GAIf,QAASqC,KAwCL,QAASjI,KACLhB,QAAQC,IAAI,oBACZmD,EAAMpC,IAAIqC,GAGd,QAASpC,KACLjB,QAAQC,IAAI,uBACZmD,EAAMnC,OAAOoC,GAKjB,QAASC,KACL7E,QAAQ+B,QAAQ2F,EAASE,SAAU,SAASjF,EAAGC,GAC3CF,EAAqBC,EAAGC,EAAGC,KAE/BA,IACA6E,EAAS+B,oBAAqB,EA/BlC,IAzBA,GAAIvH,GAAW,GAAIhB,OAAMuJ,gBACrBtI,MAAOpB,EAAQK,OAAOiB,MACtBqI,KAAM,EACNrE,iBAAiB,IAGjBqB,EAAW,GAAIxG,OAAMyG,SACrB/C,EAAS,GAAI1D,OAAMyJ,OAAOjD,EAAUxF,GACpCY,EAAO/B,EAAQ+B,KACfiH,EAAQhJ,EAAQgJ,MAChB/C,EAAS,GAAIC,OAAMnE,EAAOA,GAAMoE,KAAK,MAAMC,IAAI,SAAS5C,EAAG3B,GAC3D,GAAIK,GAAIC,KAAKC,MAAMP,EAAIE,GACnBM,EAAIR,EAAIK,EAAIH,CAKhB,OAJcI,MAAKI,IAAIL,EAAIH,EAAO,GACpBI,KAAKI,IAAIF,EAAIN,EAAO,IAI9BuE,GAAK0C,EAAQjH,EAAO,EAAKiH,EAAQ3G,EACjCkE,GAAKyC,EAAQjH,EAAO,EAAKiH,EAAQ9G,EACjCiB,EAAG,KAGPtB,EAAI,EACJgI,EAAI5D,EAAOhC,OACRpC,EAAIgI,GAAG,CACV,GAAIP,GAAQrD,EAAOpE,GACfiI,EAAS,GAAI3J,OAAM6F,OACvB8D,GAAOxD,EAAIgD,EAAMhD,EACjBwD,EAAOvD,EAAI+C,EAAM/C,EACjBuD,EAAO3G,EAAImG,EAAMnG,EACjBwD,EAASE,SAASqC,KAAKY,GAEvBjI,IAGJ8E,EAAS+B,oBAAqB,EAC9B7E,EAAO8C,SAAWA,CAYlB,IAAI7E,GAAI,CAUR,QACI+B,OAAQA,EACR1C,SAAUA,EACVK,IAAKA,EACLC,OAAQA,EACRqC,OAAQA,GAIhB,QAASiG,KAgCL,QAASvI,KACLhB,QAAQC,IAAI,qBACZmD,EAAMpC,IAAIqC,GAGd,QAASpC,KACLjB,QAAQC,IAAI,wBACZmD,EAAMnC,OAAOoC,GAKjB,QAASC,KACM9D,EAAQ+B,KACC/B,EAAQgC,cACRhC,EAAQiC,cAC5BhD,QAAQ+B,QAAQiF,EAAQ,SAASrE,EAAGC,GAChCF,EAAqBC,EAAGC,EAAGC,KAE/B7C,QAAQ+B,QAAQM,EAAO,SAASyF,EAAM0B,GAOlC1B,EAAKJ,SAAS+B,oBAAqB,IAEvC5G,IA3DJ,GAAI+B,GAAQ1C,EAAUG,IACtBH,GAAW,GAAIhB,OAAM4I,mBACjB3H,MAAOpB,EAAQK,OAAOiB,QAE1BuC,EAAS,GAAI1D,OAAMwI,QAGnB,KAFA,GAAI5G,GAAO/B,EAAQ+B,KACfiH,EAAQhJ,EAAQgJ,MACb1H,EAAM2C,OAASjE,EAAQ+B,MAAM,CAChC,GAAI4E,GAAW,GAAIxG,OAAMyG,SACrBG,EAAO,GAAI5G,OAAM6J,KAAKrD,EAAUxF,EACpC4F,GAAKd,OAAS,GAAIC,OAAMnE,GAAMoE,KAAK,MAGnC7E,EAAM4H,KAAKnC,GACXlD,EAAOrC,IAAIuF,GAEf,GAAId,GAAS,GAAIC,OAAMnE,EAAOA,GAAMoE,KAAK,MAAMC,IAAI,SAAS5C,EAAG3B,GAC3D,GAAIK,GAAIC,KAAKC,MAAMP,EAAIE,GACnBM,EAAIR,EAAIK,EAAIH,EAKZuH,GAJUnH,KAAKI,IAAIL,EAAIH,EAAO,GACpBI,KAAKI,IAAIF,EAAIN,EAAO,GAGtB,GAAI5B,OAAM6F,SAAUgD,EAAQjH,EAAO,EAAKiH,EAAQ3G,GAAK2G,EAAQjH,EAAO,EAAKiH,EAAQ9G,EACzF,GAIJ,OAFAZ,GAAMe,GAAG4D,OAAO/D,GAAKoH,EACrBhI,EAAMe,GAAGsE,SAASE,SAASqC,KAAKI,GACzBA,IAaPxH,EAAI,CAoBR,QACIN,IAAKA,EACLC,OAAQA,EACRqC,OAAQA,EACRD,OAAQA,EACR1C,SAAUA,GAqClB,QAAS8I,KAGDnH,IACAoH,EAASC,qBAAqBrH,GACN,MAApB9C,EAAQuB,QACRtC,QAAQ+B,QAAQH,EAAQI,QAAS,SAASC,GAClCA,GAAUA,EAAOkG,MAAMK,SACvBvG,EAAO4C,WAGY,MAApB9D,EAAQuB,QACfV,EAAQS,MAAMwC,SACa,MAApB9D,EAAQuB,SACfV,EAAQa,KAAKoC,UAMzB,QAASsG,KACLC,EAAMC,QACNC,IACAF,EAAMG,MACNC,sBAAsBL,GAG1B,QAASG,KACDG,GACAA,EAAS5G,SAETjD,EAAQ8J,MACR9J,EAAQ8J,KAAK7G,SAEbjD,EAAQC,QACRD,EAAQC,OAAOgD,SAEnBmG,IACAW,EAASL,OAAO3G,EAAOc,GAyB3B,QAASmG,KA+BL,QAASC,KACLC,EAAQ/F,OAAOC,WACf+F,EAAShG,OAAOE,YAChB+F,EAAKF,EAAQ,EACbG,EAAKF,EAAS,EACdJ,EAASO,QAAQJ,EAAOC,GACxBtG,EAAO0G,OAASL,EAAQC,EACxBtG,EAAO2G,yBAEXrG,OAAOsG,iBAAiB,SAAUR,GAAgB,GAqDtD,QAASS,KAgBL,QAASC,GAAK3B,GACV,MAAOA,GAAIA,EAAIA,GAAKA,GAAS,EAAJA,EAAQ,IAAM,IAG3C,QAAS4B,GAAK5B,EAAGnG,EAAGpB,GAChB,MAAOoB,GAAImG,GAAKvH,EAAIoB,GAGxB,QAASgI,GAAKC,EAAMrF,EAAGC,EAAGpD,GACtB,GAAIyI,GAAW,GAAPD,EACJE,EAAID,EAAI,EAAItF,EAAIC,EAChB3E,EAAIgK,EAAI,EAAIrF,EAAS,IAALqF,GAAgB,IAALA,EAAUtF,EAAInD,CAC7C,QAAoB,IAAP,EAAJyI,GAAeC,GAAKA,IAAkB,IAAP,EAAJD,GAAehK,GAAKA,GAhB5D,IAAK,GAXDyE,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,EAAG,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,EAAG,GAAI,GAAI,IAAK,GAAI,GAC3H,GAAI,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,GACvH,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IACpH,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,EAAG,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IACpH,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,EACtH,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IACnH,IAAK,IAAK,EAAG,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IACtH,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IACnH,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IACrH,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,KAEnExE,EAAI,EAAGA,EAAI,IAAKA,IACrBwE,EAAE,IAAMxE,GAAKwE,EAAExE,EAkBnB,QACI0G,MAAO,SAASjC,EAAGC,EAAGpD,GAClB,GAAI2I,GAAS3J,KAAKC,MAAMkE,GACpByF,EAAS5J,KAAKC,MAAMmE,GACpByF,EAAS7J,KAAKC,MAAMe,GACpB8I,EAAa,IAATH,EACJI,EAAa,IAATH,EACJI,EAAa,IAATH,CACR1F,IAAKwF,EACLvF,GAAKwF,EACL5I,GAAK6I,CACL,IAAII,GAAU9F,EAAI,EACd+F,EAAU9F,EAAI,EACd+F,EAAUnJ,EAAI,EACd0I,EAAIL,EAAKlF,GACT1E,EAAI4J,EAAKjF,GACTgG,EAAIf,EAAKrI,GACTqJ,EAAInG,EAAE4F,GAAKC,EACXO,EAAKpG,EAAEmG,GAAKL,EACZO,EAAKrG,EAAEmG,EAAI,GAAKL,EAChBQ,EAAItG,EAAE4F,EAAI,GAAKC,EACfU,EAAKvG,EAAEsG,GAAKR,EACZU,EAAKxG,EAAEsG,EAAI,GAAKR,CACpB,OAAOV,GAAKc,EAAGd,EAAK7J,EAAG6J,EAAKI,EAAGH,EAAKrF,EAAEoG,GAAKnG,EAAGC,EAAGpD,GACrCuI,EAAKrF,EAAEuG,GAAKR,EAAS7F,EAAGpD,IAC5BsI,EAAKI,EAAGH,EAAKrF,EAAEqG,GAAKpG,EAAG+F,EAASlJ,GAC5BuI,EAAKrF,EAAEwG,GAAKT,EAASC,EAASlJ,KACtCsI,EAAK7J,EAAG6J,EAAKI,EAAGH,EAAKrF,EAAEoG,EAAK,GAAInG,EAAGC,EAAG+F,GAC9BZ,EAAKrF,EAAEuG,EAAK,GAAIR,EAAS7F,EAAGpD,EAAI,IACpCsI,EAAKI,EAAGH,EAAKrF,EAAEqG,EAAK,GAAIpG,EAAG+F,EAASC,GAChCZ,EAAKrF,EAAEwG,EAAK,GAAIT,EAASC,EAASC,QA5+B1D,GAAIzL,KAEJiM,QAAOC,UAAU3I,IAAM,SAASZ,GAC5B,OAASwJ,KAAOxJ,EAAKA,GAAKA,EAwE9B,IAAIO,GArEJ,WAYI,QAASkJ,GAAQpK,EAAKqK,GACdnJ,EAAQ2D,QACR3D,EAAQ2D,MAAMC,OACd5D,EAAQ2D,MAAQ,MAEpB3D,EAAQ2D,MAAQE,UAAUC,GAAG9D,EAASA,EAAQ+D,UAC1CjF,IAAKA,EACLkF,MAAO,EACPC,KAAMC,OAAOC,UACbC,WAAY,WACJ+E,GACAA,OAMhB,QAASC,GAAQxK,GACb,GAAIyK,GAAWrJ,EAAQsJ,SAAW,CAClCtJ,GAAQsJ,QAAU1K,CAClB,IAAIzB,GAASL,EAAQI,QAAQ0B,IAAUwE,EAAiBxE,EACxDzB,GAAOM,MACPX,EAAQI,QAAQ0B,GAASzB,EACzB+L,EAAQtK,EAAQqB,EAAMC,OAAQ,WAC1BF,EAAQ2D,MAAQ,OAEpB4F,WAAW,WACP,GAAIF,IAAarJ,EAAQsJ,QAAS,CAC9B,GAAInM,GAASL,EAAQI,QAAQmM,EACzBlM,IACAA,EAAOO,WAGG,IAAnBsC,EAAQ+D,UAGf,QAASyF,KACLF,IACAA,EAAUlL,KAAKmB,IAAIU,EAAMC,OAAS,EAAGoJ,GAErCF,EAAQE,GAGZ,QAASD,KACLC,IACAA,EAAUlL,KAAKiB,IAAI,EAAGiK,GAEtBF,EAAQE,GA1DZ,GAAItJ,IACAlB,IAAK,EACLiF,SAAU,KAGV9D,EAAQ,GAAIkC,OAAM,IAAIC,OAAOC,IAAI,SAASxE,EAAGC,GAC7C,MAAOA,GAAI,IAGXwL,EAAU,CAmDd,OAAOpO,SAAQuO,OAAOzJ,GAClBC,MAAOA,EACPqJ,QAASA,EACTE,KAAMA,EACNH,SAAUA,MAKlBzN,GAAOoE,QAAUA,CAEjB,IAAImG,GAAUpH,EAAchD,EACxBuK,EAAOoD,EAAK7J,EAAOc,EAAQgJ,EAAKC,EAAOpI,EAAMC,EAA0BoF,EAAUgD,EAAW7C,EAAOC,EAAQC,EAAIC,EAC/GR,EAAW,KAEX1K,GACA6N,SAAU,wBACV5N,YAAa,GACbI,QACIC,WAAY,QACZgB,MAAO,SACPwM,MAAO,SAEXlL,MAAO,IACPb,KAAM,IACNiH,MAAO,GACPhH,cAAe,GACfC,cAAe,GACfmG,iBAAkB,GAClB7G,QAAS,IACTwM,UAAW,WACP,IAAK,GAAIlM,GAAI,EAAGA,EAAI4L,EAAIO,cAAc/J,OAAQpC,IAAK,CAC/C,GAAIQ,GAAIoL,EAAIO,cAAcnM,EAC1B,IAAIQ,EAAE4L,MAAO,CACT,GAAIC,GAAQ7L,EAAE4L,OAAS5L,EAAE8L,MAAQ9L,EAAE4L,OAAS9L,KAAKsB,QACjDuJ,MAAK3K,EAAE+L,UAAYF,EACnB7L,EAAEgM,gBAEFhM,EAAEiM,UACFjM,EAAEiM,QAAQpM,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKsB,UAC9BpB,EAAEiM,QAAQC,EAAIpM,KAAKC,MAAsB,IAAhBD,KAAKsB,UAC9BpB,EAAEiM,QAAQhM,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKsB,UAC9BpB,EAAEgM,gBACFhM,EAAEmM,SAASnM,EAAEiM,QAAQG,QAMrCzO,GAAQiG,OAAS,GAAIC,OAAsB,EAAhBlG,EAAQ4C,OAAWuD,KAAK,MAAMC,IAAI,WACzD,GAAIlE,GAAI,GAER,OAAO,IAAI/B,OAAM6F,SAAS9D,EADlBA,IACsBC,KAAKsB,UAAevB,EAD1CA,IAC8CC,KAAKsB,UAAevB,EADlEA,IACsEC,KAAKsB,YAEvFzD,EAAQkD,SAqyBR,SAAwB6H,EAAOC,GAM3B,IAAK,GALDrB,GAAOoB,EAAQC,EACf0D,EAAO,GAAIC,YAAWhF,GACtBiF,EAAS,GAAIrD,GACbsD,EAAU,EACV1L,EAAoB,IAAhBhB,KAAKsB,SACJqL,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAK,GAAIjN,GAAI,EAAGA,EAAI8H,EAAM9H,IAAK,CAC3B,GAAIyE,GAAIzE,EAAIkJ,EACRxE,KAAO1E,EAAIkJ,EACf2D,GAAK7M,IAAMM,KAAKI,IAAIqM,EAAOrG,MAAMjC,EAAIuI,EAAStI,EAAIsI,EAAS1L,GAAK0L,EAAU,MAE9EA,GAAW,EAEf,MAAOH,IAnzBuB1O,EAAQ+B,KAAM/B,EAAQ+B,MA6DxD,WACIgJ,EAAQ/F,OAAOC,WACf+F,EAAShG,OAAOE,YAChByI,EAAQ5C,EAAQC,EAChBC,EAAKF,EAAQ,EACbG,EAAKF,EAAS,EACd0C,EAAM,GACNnI,EAAO,KACPC,EAAM,IAEN5B,EAAQ,GAAIzD,OAAM4O,MAGlBrK,EAAS,GAAIvE,OAAM6O,kBAAkBtB,EAAKC,EAAOpI,EAAMC,GACvDd,EAAOL,SAASlB,EAAI,IACpBuB,EAAOL,SAASkC,GAAK,IACrB7B,EAAOE,OAAO,GAAIzE,OAAM6F,QAAQ,EAAG,EAAG,IACtC4E,EAAW,GAAIzK,OAAM8O,eACjBC,OAAO,EACPC,WAAW,EACXC,wBAAwB,IAE5BxE,EAASyE,cAAc,EAAU,GAEjCzE,EAASO,QAAQJ,EAAOC,GACxBJ,EAAS0E,UAAU7H,SAAU,EAC7BmG,EAAYlN,SAAS6O,eAAe,SACpC3B,EAAU4B,YAAY5E,EAAS6E,YAE/BpF,EAAQ,GAAIqF,OACZ9B,EAAU4B,YAAYnF,EAAMsF,KAE5B9E,OA4hBJ,WAEIhK,EAAQC,OAAS6C,IACjB9C,EAAQa,KAAO+H,IACf5I,EAAQS,MAAQyI,IAChBlJ,EAAQI,QAAU,GAAIiF,OAAMnC,EAAQC,OAAOmC,KAAK,SAIpD,WACI,GAAIyJ,GAAQC,EAAKC,EAAQ9K,OAAO+K,cAAgB/K,OAAOgL,kBACvDJ,GAAS,KACTC,EAAM,GAAIC,GACV5F,EAAW2F,EAAII,iBACfnQ,EAAQ,GAAIoQ,OACZpQ,EAAMqQ,IAAMnQ,EAAQ6N,SACpB/N,EAAM4K,UAAW,EACjB5K,EAAMwL,iBAAiB,UAAW,WAC9B,GAAI8E,EASJ,OARA5P,SAAQC,IAAI,iBACZmP,EAASC,EAAIQ,yBAAyBvQ,GACtC8P,EAAOU,QAAQpG,GACf0F,EAAOU,QAAQT,EAAIU,aACnBrG,EAASsG,QAA0B,EAAhBxQ,EAAQ4C,MAC3BwN,EAAelG,EAASuG,kBACxBjQ,QAAQC,IAAI,eAAgB2P,GAC5BtN,EAAe,GAAI6L,YAAWyB,KAGlCtQ,EAAMC,OAASC,EAAQC,YAChBH,EAAM4Q,UAoDjB,WACIjD,EAAM,GAAIkD,KAAIC,IACdnD,EAAIoD,QAAS,EACbpD,EAAIjM,IAAIxB,EAAS,WAAa8Q,QAAS,EAAGC,MAAO,EAAGC,KAAM,IAAKpR,SAASA,GACxE6N,EAAIwD,SAASjR,EAAQK,OAAQ,cAAcT,SAASA,GACpD6N,EAAIwD,SAASjR,EAAQK,OAAQ,SAAST,SAASA,GAC/C6N,EAAIjM,IAAIxB,EAAS,cAAe,IAAM,GAAKJ,SAASA,GACpD6N,EAAIjM,IAAIxB,EAAS,gBAAiB,GAAI,KAAKJ,SAASA,GACpD6N,EAAIjM,IAAIxB,EAAS,gBAAiB,GAAI,KAAKJ,SAASA,GACpD6N,EAAIjM,IAAIxB,EAAS,mBAAoB,IAAM,IAAMJ,SAASA,GAC1D6N,EAAIjM,IAAIxB,EAAS,gBAbrBJ,IACAwK","file":"app.min.js","sourcesContent":["/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app', ['ngRoute', 'jsonFormatter']);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$httpProvider', function($httpProvider) {\r\n        // $httpProvider.defaults.withCredentials = true;\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$locationProvider', function($locationProvider) {\r\n\r\n        // HTML5 MODE url writing method (false: #/anchor/use, true: /html5/url/use)\r\n        $locationProvider.html5Mode(true);\r\n        $locationProvider.hashPrefix('');\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.run(['$rootScope', function($rootScope) {\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.controller('RootCtrl', ['$scope', function($scope) {\n\n        var OBJECTS = {};\n\n        Number.prototype.mod = function(n) {\n            return ((this % n) + n) % n;\n        };\n\n        function getStepper() {\n            var stepper = {\n                pow: 0,\n                duration: 1.500, // sec\n            };\n\n            var steps = new Array(24).fill().map(function(v, i) {\n                return i + 1;\n            });\n\n            var current = 0;\n\n            function tweenTo(pow, callback) {\n                if (stepper.tween) {\n                    stepper.tween.kill();\n                    stepper.tween = null;\n                }\n                stepper.tween = TweenLite.to(stepper, stepper.duration, {\n                    pow: pow,\n                    delay: 0,\n                    ease: Power2.easeInOut,\n                    onComplete: function() {\n                        if (callback) {\n                            callback();\n                        }\n                    },\n                });\n            }\n\n            function setStep(index) {\n                var previous = stepper.current || 0;\n                stepper.current = index;\n                var circle = OBJECTS.circles[index] || getObjectCircles(index);\n                circle.add();\n                OBJECTS.circles[index] = circle;\n                tweenTo(index / steps.length, function() {\n                    stepper.tween = null;\n                });\n                setTimeout(function() {\n                    if (previous !== stepper.current) {\n                        var circle = OBJECTS.circles[previous];\n                        if (circle) {\n                            circle.remove();\n                        }\n                    }\n                }, stepper.duration * 1000);\n            }\n\n            function next() {\n                current++;\n                current = Math.min(steps.length - 1, current);\n                // current = current % steps.length;\n                setStep(current);\n            }\n\n            function previous() {\n                current--;\n                current = Math.max(0, current);\n                // current = current % steps.length;\n                setStep(current);\n            }\n            return angular.extend(stepper, {\n                steps: steps,\n                current: current,\n                next: next,\n                previous: previous,\n            });\n        }\n\n        var stepper = getStepper();\n        $scope.stepper = stepper;\n\n        var analyser, analyserData, audio;\n        var stats, gui, scene, camera, fov, ratio, near, far, shadow, back, light, renderer, container, width, height, w2, h2, mouse = { x: 0, y: 0 };\n        var controls = null;\n\n        var options = {\n            audioUrl: \"audio/rossini-192.mp3\",\n            audioVolume: 0.5,\n            colors: {\n                background: 0x111111, // 0xffffff,\n                lines: 0x999999, // 0x888888,\n                notes: 0x444444, // 0xaaaaaa,\n            },\n            bands: 256,\n            rows: 128,\n            space: 10,\n            audioStrength: 60,\n            noiseStrength: 25,\n            circularStrength: 0.90,\n            display: '0',\n            randomize: function() {\n                for (var i = 0; i < gui.__controllers.length; i++) {\n                    var c = gui.__controllers[i];\n                    if (c.__min) {\n                        var value = c.__min + (c.__max - c.__min) * Math.random();\n                        this[c.property] = value;\n                        c.updateDisplay();\n                    }\n                    if (c.__color) {\n                        c.__color.r = Math.floor(Math.random() * 255);\n                        c.__color.g = Math.floor(Math.random() * 255);\n                        c.__color.b = Math.floor(Math.random() * 255);\n                        c.updateDisplay();\n                        c.setValue(c.__color.hex);\n                    }\n                }\n            }\n        };\n\n        options.points = new Array(options.bands * 2).fill(null).map(function() {\n            var r = 1000,\n                d = r * 2;\n            return new THREE.Vector3(-r + Math.random() * d, -r + Math.random() * d, -r + Math.random() * d);\n        });\n        options.noiseMap = getPerlinNoise(options.rows, options.rows);\n\n        function onChange(params) {\n            // renderer.setClearColor(options.colors.background, 1);\n            if (audio) {\n                audio.volume = options.audioVolume;\n            }\n            var backgroundColor = new THREE.Color(options.colors.background).getHexString();\n            console.log('backgroundColor', backgroundColor);\n            document.body.style.backgroundColor = '#' + backgroundColor;\n            if (OBJECTS.ribbon) {\n                OBJECTS.ribbon.setMaterial();\n            }\n            angular.forEach(OBJECTS.circles, function(circle) {\n                if (circle) {\n                    circle.material.color.setHex(options.colors.lines);\n                }\n            });\n            /*\n            if (OBJECTS.circles) {\n                OBJECTS.circles.material.color.setHex(options.colors.lines);\n                if (options.display === '0') {\n                    OBJECTS.circles.add();\n                } else {\n                    OBJECTS.circles.remove();\n                }\n            }\n            */\n            if (OBJECTS.lines) {\n                OBJECTS.lines.material.color.setHex(options.colors.lines);\n                if (options.display === '1') {\n                    OBJECTS.lines.add();\n                } else {\n                    OBJECTS.lines.remove();\n                }\n            }\n            if (OBJECTS.dots) {\n                OBJECTS.dots.material.color.setHex(options.colors.lines);\n                if (options.display === '2') {\n                    OBJECTS.dots.add();\n                } else {\n                    OBJECTS.dots.remove();\n                }\n            }\n        }\n\n        function createLights() {\n            light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.5);\n            shadow = new THREE.DirectionalLight(0xffffff, 0.8);\n            shadow.position.set(200, 200, 200);\n            shadow.castShadow = true;\n            // shadow.shadowDarkness = .2;\n            back = new THREE.DirectionalLight(0xffffff, 0.4);\n            back.position.set(-100, 200, 50);\n            // back.shadowDarkness = .2;\n            back.castShadow = true;\n            scene.add(light);\n            scene.add(shadow);\n            scene.add(back);\n        }\n\n        function createScene() {\n            width = window.innerWidth;\n            height = window.innerHeight;\n            ratio = width / height;\n            w2 = width / 2;\n            h2 = height / 2;\n            fov = 60;\n            near = 0.001;\n            far = 20000;\n\n            scene = new THREE.Scene();\n            // scene.fog = new THREE.Fog(0x000000, 300, 1000);\n\n            camera = new THREE.PerspectiveCamera(fov, ratio, near, far);\n            camera.position.z = 100;\n            camera.position.y = -500;\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\n            renderer = new THREE.WebGLRenderer({\n                alpha: true,\n                antialias: true,\n                logarithmicDepthBuffer: true\n            });\n            renderer.setClearColor(0x000000, 0); // the default\n            // renderer.setClearColor(options.colors.background, 1);\n            renderer.setSize(width, height);\n            renderer.shadowMap.enabled = true;\n            container = document.getElementById('scene');\n            container.appendChild(renderer.domElement);\n\n            stats = new Stats();\n            container.appendChild(stats.dom);\n\n            addListeners();\n            // controls = new THREE.OrbitControls(camera, renderer.domElement);\n        }\n\n        function animateVertexAtIndex(v, i, d) {\n            var rows = options.rows,\n                audioStrength = options.audioStrength,\n                noiseStrength = options.noiseStrength;\n            var r = Math.floor(i / rows);\n            var c = i - r * rows;\n            var b = Math.abs(c - rows / 2) * 2;\n            var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n            var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n            var drc = (dr + dc) / 2;\n            var index = b % options.bands;\n            var pow = analyserData[index];\n            var scale = (pow / options.bands) * dr * 2;\n            var ni = r * rows + ((c + d) % rows);\n            var level = (options.noiseMap[ni] / 64 * noiseStrength) * drc + (audioStrength * scale);\n            v.z += (level - v.z) / (3 + 3 * Math.max(0.000001, 1 - drc));\n        }\n\n        function getObjectTube() {\n            var options = {\n                path: spline,\n                tubularSegments: 500,\n                radius: 1,\n                radiusSegments: 2,\n                closed: true,\n            }\n            var spline = new THREE.CatmullRomCurve3([\n                new THREE.Vector3(-400, -400, 0),\n                new THREE.Vector3(400, -400, 0),\n                new THREE.Vector3(1400, -400, 0),\n                new THREE.Vector3(400, 400, 0),\n                new THREE.Vector3(-400, 400, 0)\n            ]);\n            spline.type = 'catmullrom';\n            spline.closed = true;\n\n            var object = new THREE.Object3D();\n            scene.add(object);\n\n            var material = new THREE.MeshLambertMaterial({\n                color: 0xffffff\n            });\n            var geometry = new THREE.TubeBufferGeometry(spline, options.tubularSegments, options.radius, options.radiusSegments, options.closed);\n            var group = new THREE.Mesh(geometry, material);\n            object.add(group);\n\n            // if (group !== undefined) {\n            //     object.remove(group);\n            //     group.children[0].geometry.dispose();\n            //     group.children[1].geometry.dispose();\n            // }            \n\n            /*\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(500);\n            var line = new MeshLine();\n            line.setGeometry(geometry);\n            // line.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n            // line.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n            // line.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n            var material = new MeshLineMaterial({\n                color: new THREE.Color(0xffffff),\n                lineWidth: 4,\n            });\n            var mesh = new THREE.Mesh(line.geometry, material);\n            object.add(mesh);\n            */\n\n            function add() {\n                console.log('OBJECTS.tube.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.tube.remove');\n                scene.remove(object);\n            }\n\n            var d = 0; // iterator\n            var a = new THREE.Vector3(); // normal\n            var b = new THREE.Vector3(); // binormal\n\n            function update() {\n                var duration = 20 * 1000;\n                var scale = 1;\n                var offset = 15;\n                var lookAhead = true;\n                var msec = Date.now();\n                var pow = (msec % duration) / duration;\n                var dir = spline.getTangentAt(pow);\n                var tangents = geometry.tangents;\n                var binormals = geometry.binormals;\n                var x = pow * tangents.length;\n                var c = Math.floor(x);\n                var n = (c + 1) % tangents.length;\n                b.subVectors(binormals[n], binormals[c]);\n                b.multiplyScalar(x - c).add(binormals[c]);\n                a.copy(b).cross(dir);\n                var p = spline.getPointAt(pow);\n                p.multiplyScalar(scale);\n                p.add(a.clone().multiplyScalar(offset));\n                camera.position.copy(p);\n                var lookAt;\n                if (lookAhead) {\n                    // using arclength for stablization in look ahead\n                    lookAt = spline.getPointAt((pow + 30 / spline.getLength()) % 1).multiplyScalar(scale);\n                } else {\n                    // camera orientation 2 - up orientation via normal\n                    lookAt = new THREE.Vector3().copy(p).add(dir);\n                }\n                camera.matrix.lookAt(camera.position, lookAt, a);\n                camera.rotation.setFromRotationMatrix(camera.matrix, camera.rotation.order);\n                d++;\n            }\n\n            return {\n                object: object,\n                spline: spline,\n                geometry: geometry,\n                add: add,\n                remove: remove,\n                update: update,\n            };\n        }\n\n        function getRandomRange(min, max, allowNegatives) {\n            var n = -1 + Math.random() * 2;\n            var a = Math.abs(n);\n            var s = allowNegatives ? Math.floor(n / a) : 1;\n            return s * (min + (max - min) * a);\n        }\n\n        function getObjectRibbon() {\n            var material = getMaterial();\n\n            /*\n            var points = [\n                new THREE.Vector3(-2000, 0, -2000),\n                new THREE.Vector3(2000, 0, -2000),\n                new THREE.Vector3(4000, 0, -2000),\n                new THREE.Vector3(2000, 0, 2000),\n                new THREE.Vector3(-2000, 0, 2000)\n            ];\n            */\n\n            var prev = new THREE.Vector3();\n            var points = new Array(12).fill(null).map(function() {\n                var p = new THREE.Vector3().copy(prev);\n                prev.x += getRandomRange(500, 1000, true);\n                prev.y += getRandomRange(50, 100, true);\n                prev.z += getRandomRange(1000, 2000, false);\n                return p;\n            });\n\n            var spline = new THREE.CatmullRomCurve3(points);\n            spline.type = 'catmullrom';\n            // spline.closed = true;\n\n            var cameraHeight = 30;\n            var cameraSpline = new THREE.CatmullRomCurve3(spline.points.map(function(p) {\n                return new THREE.Vector3(p.x, p.y + cameraHeight, p.z);\n            }));\n            cameraSpline.type = 'catmullrom';\n            // cameraSpline.closed = true;\n\n            var targetHeight = 15;\n            var targetSpline = new THREE.CatmullRomCurve3(spline.points.map(function(p) {\n                return new THREE.Vector3(p.x, p.y + targetHeight, p.z);\n            }));\n            targetSpline.type = 'catmullrom';\n            // targetSpline.closed = true;\n\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(1200);\n\n            var line = new MeshLine();\n            line.setGeometry(geometry);\n            // line.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n            // line.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n            // line.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n\n            var object = new THREE.Mesh(line.geometry, material);\n            // var object = new THREE.Object3D();\n            // object.add(mesh);\n            scene.add(object);\n\n            function add() {\n                console.log('OBJECTS.ribbon.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.ribbon.remove');\n                scene.remove(object);\n            }\n\n            camera.target = camera.target || new THREE.Vector3(0, 0, 0);\n\n            function update() {\n                var c = (1 / stepper.steps.length) / 10;\n                var cpow = stepper.pow;\n                var tpow = (cpow + c).mod(1);\n\n                var position = cameraSpline.getPointAt(cpow);\n                var target = targetSpline.getPointAt(tpow);\n\n                camera.position.copy(position);\n                camera.target.copy(target);\n                camera.lookAt(camera.target);\n            }\n\n            function getMaterial() {\n                var resolution = new THREE.Vector2(window.innerWidth, window.innerHeight);\n                return new MeshLineMaterial({\n                    color: new THREE.Color(options.colors.lines),\n                    lineWidth: 4,\n                    opacity: 1,\n                    resolution: resolution,\n                    sizeAttenuation: 1,\n                    near: 1,\n                    far: 1000,\n                    depthTest: false,\n                    blending: THREE.AdditiveBlending,\n                    transparent: false,\n                    side: THREE.DoubleSide,\n                });\n            }\n\n            function setMaterial() {\n                // !!! non va bene\n                OBJECTS.ribbon.material = getMaterial();\n                OBJECTS.ribbon.object.material = OBJECTS.ribbon.material;\n            }\n\n            return {\n                object: object,\n                spline: spline,\n                cameraSpline: cameraSpline,\n                targetSpline: targetSpline,\n                geometry: geometry,\n                material: material,\n                add: add,\n                remove: remove,\n                update: update,\n                setMaterial: setMaterial,\n            };\n        }\n\n        function getObjectCircles(index) {\n            var geometry, material, object, circles = [];\n\n            object = new THREE.Object3D();\n\n            geometry = new THREE.IcosahedronGeometry(90, 3); // radius, detail\n            material = new THREE.MeshBasicMaterial({\n                color: 0xffff00,\n            });\n            var sphere = new THREE.Mesh(geometry, material);\n            object.add(sphere);\n\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n\n            var rows = options.rows,\n                space = options.space;\n            while (circles.length < options.rows) {\n                geometry = new THREE.Geometry();\n                var circle = new THREE.LineLoop(geometry, material);\n                circle.points = new Array(rows).fill(null);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // circle.spline = spline;\n                circles.push(circle);\n                object.add(circle);\n            }\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var angle = 2 * Math.PI / rows;\n                var rad = angle * r + angle * c * 0.1;\n                var point = new THREE.Vector3();\n                point.r = {\n                    x: Math.cos(rad),\n                    y: Math.sin(rad),\n                    z: 96 + (c * c * c * 0.0001),\n                };\n                circles[c].points[r] = point;\n                circles[c].geometry.vertices.push(point);\n                return point;\n            });\n\n            var state = {\n                pow: 0,\n                duration: 0.350,\n                enabled: false,\n                adding: false,\n                removing: false,\n            };\n\n            var to = null;\n\n            function add() {\n                console.log('OBJECTS.circles.add');\n                scene.add(object);\n                state.adding = Date.now();\n                state.removing = false;\n                state.enabled = true;\n                if (state.tween) {\n                    state.tween.kill();\n                }\n                state.tween = TweenLite.to(state, state.duration, {\n                    pow: 1,\n                    delay: 0,\n                    ease: Power2.easeInOut,\n                    onComplete: function() {\n                        state.adding = false;\n                    },\n                });\n            }\n\n            function remove() {\n                console.log('OBJECTS.circles.remove');\n                state.adding = false;\n                state.removing = Date.now();\n                if (state.tween) {\n                    state.tween.kill();\n                }\n                state.tween = TweenLite.to(state, state.duration, {\n                    pow: 0,\n                    delay: 0,\n                    ease: Power2.easeInOut,\n                    onComplete: function() {\n                        state.removing = false;\n                        state.enabled = false;\n                        scene.remove(object);\n                    },\n                });\n            }\n\n            var d = 0;\n\n            function update() {\n                var rows = options.rows,\n                    audioStrength = options.audioStrength,\n                    noiseStrength = options.noiseStrength,\n                    circularStrength = options.circularStrength;\n                angular.forEach(points, function(v, i) {\n                    // animateVertexAtIndex(v, i, d);\n                    var r = Math.floor(i / rows);\n                    var c = i - r * rows;\n                    var b = Math.abs(c - rows / 2) * 2;\n                    var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                    var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                    var drc = (dr + dc) / 2;\n                    var ai = r % options.bands;\n                    var pow = (analyserData[ai] + analyserData[rows - 1 - ai]) / 2;\n                    var scale = pow / options.bands;\n                    var na = c * rows + ((r + d) % rows);\n                    var noise = options.noiseMap[na];\n                    var cpow = 1 - ((rows - c) / rows * circularStrength);\n                    var level = v.r.z + (noise / 64 * noiseStrength) * cpow + (audioStrength * 2 * scale * scale) * cpow;\n                    var radius = v.radius || level;\n                    radius += (level - radius) / 2;\n                    v.x = v.r.x * radius;\n                    v.y = v.r.y * radius;\n                    v.z = 0; // -c;\n                    v.radius = radius;\n                });\n                angular.forEach(circles, function(circle, l) {\n                    // var points = circle.points;\n                    // var spline = circle.spline;\n                    // spline.getPoints(rows * 2);\n                    // circle.geometry.vertices = points;\n                    // geometry.computeLineDistances();\n                    // geometry.lineDistancesNeedUpdate = true;\n                    circle.geometry.verticesNeedUpdate = true;\n                });\n                object.scale.x = object.scale.y = object.scale.z = 0.001 + 0.3 * state.pow;\n                object.lookAt(camera.position);\n                // d++;\n            }\n\n            var position = OBJECTS.ribbon.cameraSpline.getPointAt((index + 0.5) / stepper.steps.length);\n\n            object.position.copy(position);\n\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n                state: state,\n            };\n        }\n\n        function getObjectDots() {\n            var material = new THREE.PointsMaterial({\n                color: options.colors.lines,\n                size: 1,\n                sizeAttenuation: false,\n                // vertexColors: THREE.VertexColors,\n            });\n            var geometry = new THREE.Geometry();\n            var object = new THREE.Points(geometry, material);\n            var rows = options.rows,\n                space = options.space;\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                var drc = (dr + dc) / 2;\n                var idrc = 1 - drc;\n                return {\n                    x: -(space * rows / 2) + space * c,\n                    y: -(space * rows / 2) + space * r,\n                    z: 0,\n                };\n            });\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var point = points[i];\n                var vertex = new THREE.Vector3();\n                vertex.x = point.x;\n                vertex.y = point.y;\n                vertex.z = point.z;\n                geometry.vertices.push(vertex);\n                // geometry.colors.push(new THREE.Color(0xffcc00));\n                i++;\n            }\n            // geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            object.geometry = geometry;\n\n            function add() {\n                console.log('OBJECTS.dots.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.dots.remove');\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                angular.forEach(geometry.vertices, function(v, i) {\n                    animateVertexAtIndex(v, i, d);\n                });\n                d++;\n                geometry.verticesNeedUpdate = true;\n            }\n\n            return {\n                object: object,\n                material: material,\n                add: add,\n                remove: remove,\n                update: update,\n            };\n        }\n\n        function getObjectLines() {\n            var object, material, lines = [];\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Object3D();\n            var rows = options.rows,\n                space = options.space;\n            while (lines.length < options.rows) {\n                var geometry = new THREE.Geometry();\n                var line = new THREE.Line(geometry, material);\n                line.points = new Array(rows).fill(null);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // line.spline = spline;\n                lines.push(line);\n                object.add(line);\n            }\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                var drc = (dr + dc) / 2;\n                var idrc = 1 - drc;\n                var point = new THREE.Vector3(-(space * rows / 2) + space * c, -(space * rows / 2) + space * r,\n                    0\n                );\n                lines[c].points[r] = point;\n                lines[c].geometry.vertices.push(point);\n                return point;\n            });\n\n            function add() {\n                console.log('OBJECTS.lines.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.lines.remove');\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                var rows = options.rows,\n                    audioStrength = options.audioStrength,\n                    noiseStrength = options.noiseStrength;\n                angular.forEach(points, function(v, i) {\n                    animateVertexAtIndex(v, i, d);\n                });\n                angular.forEach(lines, function(line, l) {\n                    // var points = line.points;\n                    // var spline = line.spline;\n                    // spline.getPoints(rows * 2);\n                    // line.geometry.vertices = points;\n                    // geometry.computeLineDistances();\n                    // geometry.lineDistancesNeedUpdate = true;\n                    line.geometry.verticesNeedUpdate = true;\n                });\n                d++;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n            };\n        }\n\n        function createObjects() {\n            // OBJECTS.tube = getObjectTube();\n            OBJECTS.ribbon = getObjectRibbon();\n            OBJECTS.dots = getObjectDots();\n            OBJECTS.lines = getObjectLines();\n            OBJECTS.circles = new Array(stepper.steps).fill(null);\n            // OBJECTS.notes = getNotes();\n        }\n\n        function createAnalyser() {\n            var source, ctx, actx = (window.AudioContext || window.webkitAudioContext);\n            source = null;\n            ctx = new actx();\n            analyser = ctx.createAnalyser();\n            audio = new Audio();\n            audio.src = options.audioUrl;\n            audio.controls = true;\n            audio.addEventListener('canplay', function() {\n                var bufferLength;\n                console.log('audio canplay');\n                source = ctx.createMediaElementSource(audio);\n                source.connect(analyser);\n                source.connect(ctx.destination);\n                analyser.fftSize = options.bands * 2;\n                bufferLength = analyser.frequencyBinCount;\n                console.log('bufferLength', bufferLength);\n                analyserData = new Uint8Array(bufferLength);\n                return analyserData;\n            });\n            audio.volume = options.audioVolume;\n            return audio.play();\n        }\n\n        function updateAnalyser() {\n            // notes.rotation.z -= 0.0025;\n            // lines.rotation.z -= 0.0025;            \n            if (analyserData) {\n                analyser.getByteFrequencyData(analyserData);\n                if (options.display === '0') {\n                    angular.forEach(OBJECTS.circles, function(circle) {\n                        if (circle && circle.state.enabled) {\n                            circle.update();\n                        }\n                    });\n                } else if (options.display === '1') {\n                    OBJECTS.lines.update();\n                } else if (options.display === '2') {\n                    OBJECTS.dots.update();\n                }\n                // OBJECTS.notes.update();\n            }\n        }\n\n        function loop() {\n            stats.begin();\n            render();\n            stats.end();\n            requestAnimationFrame(loop);\n        }\n\n        function render() {\n            if (controls) {\n                controls.update();\n            }\n            if (OBJECTS.tube) {\n                OBJECTS.tube.update();\n            }\n            if (OBJECTS.ribbon) {\n                OBJECTS.ribbon.update();\n            }\n            updateAnalyser();\n            renderer.render(scene, camera);\n        }\n\n        createScene();\n        // createLights();\n        createObjects();\n        createAnalyser();\n        addGui();\n        onChange();\n        loop();\n\n        function addGui() {\n            gui = new dat.GUI();\n            gui.closed = true;\n            gui.add(options, 'display', { Circles: 0, Lines: 1, Dots: 2 }).onChange(onChange);\n            gui.addColor(options.colors, 'background').onChange(onChange);\n            gui.addColor(options.colors, 'lines').onChange(onChange);\n            gui.add(options, 'audioVolume', 0.01, 1.0).onChange(onChange);\n            gui.add(options, 'audioStrength', 10, 100).onChange(onChange);\n            gui.add(options, 'noiseStrength', 10, 100).onChange(onChange);\n            gui.add(options, 'circularStrength', 0.01, 0.90).onChange(onChange);\n            gui.add(options, 'randomize');\n            return gui;\n        }\n\n        function addListeners() {\n            function handleMouseMove(event) {\n                mouse = { x: event.clientX, y: event.clientY };\n            }\n\n            function handleMouseDown(event) {\n                //\n            }\n\n            function handleMouseUp(event) {\n                //\n            }\n\n            function handleTouchStart(event) {\n                if (event.touches.length > 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function handleTouchEnd(event) {\n                mousePos = { x: windowHalfX, y: windowHalfY };\n            }\n\n            function handleTouchMove(event) {\n                if (event.touches.length == 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function onWindowResize() {\n                width = window.innerWidth;\n                height = window.innerHeight;\n                w2 = width / 2;\n                h2 = height / 2;\n                renderer.setSize(width, height);\n                camera.aspect = width / height;\n                camera.updateProjectionMatrix();\n            }\n            window.addEventListener('resize', onWindowResize, false);\n            /*\n            document.addEventListener('mousemove', handleMouseMove, false);\n            document.addEventListener('mousedown', handleMouseDown, false);\n            document.addEventListener('mouseup', handleMouseUp, false);\n            document.addEventListener('touchstart', handleTouchStart, false);\n            document.addEventListener('touchend', handleTouchEnd, false);\n            document.addEventListener('touchmove', handleTouchMove, false);\n            */\n        }\n\n        function getSprite() {\n            var canvas = document.createElement('canvas');\n            canvas.width = 128;\n            canvas.height = 128;\n            var ctx = canvas.getContext('2d');\n            var gradient = ctx.createRadialGradient(\n                canvas.width / 2,\n                canvas.height / 2,\n                0,\n                canvas.width / 2,\n                canvas.height / 2,\n                canvas.width / 2\n            );\n            /*\n            gradient.addColorStop(0, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.2, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.22, 'rgba(0,0,0,.2)');\n            gradient.addColorStop(1, 'rgba(0,0,0,0)');\n            ctx.fillStyle = gradient;\n            */\n            ctx.fillStyle = \"#000000\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            return canvas;\n        }\n\n        function getPerlinNoise(width, height) {\n            var size = width * height,\n                data = new Uint8Array(size),\n                perlin = new ImprovedNoise(),\n                quality = 1,\n                z = Math.random() * 100;\n            for (var j = 0; j < 4; j++) {\n                for (var i = 0; i < size; i++) {\n                    var x = i % width,\n                        y = ~~(i / width);\n                    data[i] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75);\n                }\n                quality *= 5;\n            }\n            return data;\n        }\n\n        function ImprovedNoise() {\n            var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\n                23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\n                174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n                133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\n                89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\n                202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\n                248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\n                178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n                14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n                93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (var i = 0; i < 256; i++) {\n                p[256 + i] = p[i];\n            }\n\n            function fade(t) {\n                return t * t * t * (t * (t * 6 - 15) + 10);\n            }\n\n            function lerp(t, a, b) {\n                return a + t * (b - a);\n            }\n\n            function grad(hash, x, y, z) {\n                var h = hash & 15;\n                var u = h < 8 ? x : y,\n                    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n                return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n            }\n\n            return {\n                noise: function(x, y, z) {\n                    var floorX = Math.floor(x),\n                        floorY = Math.floor(y),\n                        floorZ = Math.floor(z);\n                    var X = floorX & 255,\n                        Y = floorY & 255,\n                        Z = floorZ & 255;\n                    x -= floorX;\n                    y -= floorY;\n                    z -= floorZ;\n                    var xMinus1 = x - 1,\n                        yMinus1 = y - 1,\n                        zMinus1 = z - 1;\n                    var u = fade(x),\n                        v = fade(y),\n                        w = fade(z);\n                    var A = p[X] + Y,\n                        AA = p[A] + Z,\n                        AB = p[A + 1] + Z,\n                        B = p[X + 1] + Y,\n                        BA = p[B] + Z,\n                        BB = p[B + 1] + Z;\n                    return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n                                grad(p[BA], xMinus1, y, z)),\n                            lerp(u, grad(p[AB], x, yMinus1, z),\n                                grad(p[BB], xMinus1, yMinus1, z))),\n                        lerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n                                grad(p[BA + 1], xMinus1, y, z - 1)),\n                            lerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n                                grad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n                }\n            };\n        }\n\n\n\n        //////////\n\n        function addNotes() {\n            // alert('onChange', params);\n            /*\n            var dx = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dy = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dz = 40 - 40 * params.dispersion * (1 - params.bulge);\n            */\n            var geometry = new THREE.Geometry();\n            // geometry.vertices.splice(0, geometry.vertices.length);\n            var points = options.points;\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var p = points[i];\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            notes.geometry = geometry;\n            addSplines(points);\n        }\n\n        function addSplines(points) {\n            points = points.map(function(point) {\n                return new THREE.Vector3(point.x, point.y, point.z);\n            });\n            var spline = new THREE.CatmullRomCurve3(points);\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(5000);\n            // geometry.mergeVertices();\n            // geometry.verticesNeedUpdate = true;\n            // geometry.computeLineDistances();\n            // geometry.lineDistancesNeedUpdate = true;\n            lines.geometry = geometry;\n        }\n\n        /*\n        function getNotes() {\n            var object, geometry, material;\n            geometry = new THREE.Geometry();\n            texture = new THREE.CanvasTexture(getSprite());\n            material = new THREE.PointsMaterial({\n                size: 12,\n                map: texture,\n                vertexColors: THREE.VertexColors,\n                blending: THREE.AdditiveBlending,\n                depthTest: false,\n                transparent: true\n            });\n            material = new THREE.PointsMaterial({\n                color: options.colors.notes,\n                size: 2,\n                sizeAttenuation: false,\n            });\n            object = new THREE.Points(geometry, material);\n\n            var points = options.points;\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var p = points[i];\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n\n            function add() {\n                console.log('OBJECTS.notes.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.notes.remove');\n                scene.remove(object);\n            }\n\n            function update() {\n                angular.forEach(geometry.vertices, function(v, i) {\n                    var index = i % options.bands;\n                    var pow = analyserData[index];\n                    var scale = (pow / options.bands) * 2;\n                    var p = options.points[i];\n                    var vx = p.x * (1 + scale);\n                    var vy = p.y * (1 + scale);\n                    var vz = p.z * (1 + scale);\n                    v.x += (vx - v.x) / 3;\n                    v.y += (vy - v.y) / 3;\n                    v.z += (vz - v.z) / 3;\n                });\n                geometry.verticesNeedUpdate = true;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n\n        }\n\n        function getLines() {\n            var object, geometry, material;\n\n            geometry = new THREE.Geometry();\n            material = new THREE.LineDashedMaterial({\n                color: options.colors.lines,\n                dashSize: 1,\n                gapSize: 0.5,\n            });\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Line(geometry, material);\n\n            function add() {\n                scene.add(object);\n            }\n\n            function remove() {\n                scene.remove(object);\n            }\n\n            function update() {\n\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n\n        }\n        */\n\n    }]);\n\n}());"]}